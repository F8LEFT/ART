-- Test file for Kate's Euphoria syntax highlighting/code folding.
<beginfold id='7'>-- BEGIN region marker test</beginfold id='7'>

-- code here

<endfold id='7'>-- END region marker test</endfold id='7'>

-- The N Queens Problem:
-- Place N Queens on an NxN chess board
-- such that they don't threaten each other.
constant N = 8 -- try some other sizes
constant ROW = 1, COLUMN = 2
constant TRUE = 1, FALSE = 0
<beginfold id='6'>type</beginfold id='6'> square(sequence x)
-- a square on the board
    return length(x) = 2
<endfold id='6'>end type</endfold id='6'>
<beginfold id='6'>type</beginfold id='6'> row(integer x)
-- a row on the board
    return x >= 1 and x <= N
<endfold id='6'>end type</endfold id='6'>

<beginfold id='3'>function</beginfold id='3'> threat(square q1, square q2)
-- do two queens threaten each other?
    <beginfold id='2'>if</beginfold id='2'> q1[COLUMN] = q2[COLUMN] then
 return TRUE
    elsif q1[ROW] - q1[COLUMN] = q2[ROW] - q2[COLUMN] then
 return TRUE
    elsif q1[ROW] + q1[COLUMN] = q2[ROW] + q2[COLUMN] then
 return TRUE
    elsif q1[ROW] = q2[ROW] then
 return TRUE
    else
 return FALSE
    <endfold id='2'>end if</endfold id='2'>
<endfold id='3'>end function</endfold id='3'>

<beginfold id='3'>function</beginfold id='3'> conflict(square q, sequence queens)
-- Would square p cause a conflict with other queens on board so far?
    <beginfold id='1'>for</beginfold id='1'> i = 1 to length(queens) do
 <beginfold id='2'>if</beginfold id='2'> threat(q, queens[i]) then
     return TRUE
 <endfold id='2'>end if</endfold id='2'>
    <endfold id='1'>end for</endfold id='1'>
    return FALSE
<endfold id='3'>end function</endfold id='3'>

integer soln
soln = 0 -- solution number

<beginfold id='4'>procedure</beginfold id='4'> print_board(sequence queens)
-- print a solution, showing the Queens on the board
    integer k
    position(1, 1)
    printf(1, "Solution #%d\n\n  ", soln)
    <beginfold id='1'>for</beginfold id='1'> c = 'a' to 'a' + N - 1 do
 printf(1, "%2s", c)
    <endfold id='1'>end for</endfold id='1'>
    puts(1, "\n")
    <beginfold id='1'>for</beginfold id='1'> r = 1 to N do
 printf(1, "%2d ", r)
 <beginfold id='1'>for</beginfold id='1'> c = 1 to N do
     <beginfold id='2'>if</beginfold id='2'> find({r,c}, queens) then
  puts(1, "Q ")
     else
  puts(1, ". ")
     <endfold id='2'>end if</endfold id='2'>
 <endfold id='1'>end for</endfold id='1'>
 puts(1, "\n")
    <endfold id='1'>end for</endfold id='1'>
    puts(1, "\nPress Enter. (q to quit) ")
    <beginfold id='5'>while</beginfold id='5'> TRUE do
 k = get_key()
 <beginfold id='2'>if</beginfold id='2'> k = 'q' then
     abort(0)
 elsif k != -1 then
     exit
 <endfold id='2'>end if</endfold id='2'>
    <endfold id='5'>end while</endfold id='5'>
<endfold id='4'>end procedure</endfold id='4'>

<beginfold id='4'>procedure</beginfold id='4'> place_queen(sequence queens)
-- place queens on a NxN chess board
-- (recursive procedure)
    row r -- only need to consider one row for each queen
    <beginfold id='2'>if</beginfold id='2'> length(queens) = N then
 soln += 1
 print_board(queens)
 return
    <endfold id='2'>end if</endfold id='2'>
    r = length(queens)+1
    <beginfold id='1'>for</beginfold id='1'> c = 1 to N do
 <beginfold id='2'>if</beginfold id='2'> not conflict({r,c}, queens) then
     place_queen(append(queens, {r,c}))
 <endfold id='2'>end if</endfold id='2'>
    <endfold id='1'>end for</endfold id='1'>
<endfold id='4'>end procedure</endfold id='4'>
