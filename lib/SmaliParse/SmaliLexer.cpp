#line 1 "SmaliLexer.cpp"

#line 3 "SmaliLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 2
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer Analysis_FlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file; 

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *Analysis_alloc ( yy_size_t  );
void *Analysis_realloc ( void *, yy_size_t  );
void Analysis_free ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int SmaliLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 385
#define YY_END_OF_BUFFER 386
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2246] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  386,  384,  382,  383,   52,  114,  380,   53,
        8,    9,  384,    5,  384,  384,   41,   41,    4,  384,
        3,  374,  374,  380,  380,  375,  377,  384,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,    6,    7,  384,
      384,  384,   55,  385,   54,   59,   56,   59,   58,  373,
      371,  373,   61,   73,   60,  385,   75,   87,   74,  385,
      114,  380,    0,    0,    0,    0,    0,    0,    0,    0,
       42,   42,    2,    0,    1,   49,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   49,   41,  380,   47,
      380,   46,   43,   44,   45,  380,   41,    0,    0,    0,
        0,  378,  380,    0,  380,  380,    0,    0,    0,  380,
        0,    0,  377,    0,    0,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,   88,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
        0,    0,    0,    0,    0,    0,   58,    0,    0,    0,

        0,   61,   72,   68,   67,   69,   62,   65,   64,   66,
       63,   71,   75,   86,   82,   81,   83,   76,   79,   78,
       80,   77,   85,    0,    0,    0,    0,    0,    0,    0,
       42,    0,   47,    0,   46,   43,   44,   45,    0,   42,
        0,   49,    0,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   49,    0,    0,   47,    0,   41,  381,    0,    0,
      380,    0,    0,    0,  379,    0,  380,  380,  376,    0,
        0,   47,  379,    0,    0,    0,    0,    0,    0,    0,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,    0,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,    0,
      115,  380,  380,    0,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,    0,    0,   57,    0,    0,    0,  372,    0,
        0,   71,   85,    0,    0,    0,    0,    0,    0,    0,
       47,   42,    0,    0,   49,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
      380,    0,  380,    0,    0,    0,    0,    0,    0,  380,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      380,    0,  183,    0,  380,  190,  380,  380,  380,  380,
      380,    0,  380,  380,  380,  380,    0,  380,  107,  380,
      380,  380,  380,  380,  380,  155,    0,    0,    0,    0,
      197,  380,  380,  380,    0,  380,  380,  204,  380,  380,
      116,    0,  380,    0,    0,    0,    0,    0,   51,    0,
        0,  380,  380,  380,  380,    0,  380,  380,  380,  211,
        0,    0,  380,  218,  380,  380,    0,  380,  380,  380,

      380,  380,  380,   50,  380,  380,  380,  380,  380,    0,
        0,    0,   71,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
        0,    0,   33,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   47,    0,
        0,    0,    0,  380,    0,    0,    0,    0,    0,    0,
      380,    0,    0,    0,    0,    0,    0,    0,  380,    0,
      380,  380,   89,  380,  380,    0,    0,    0,  135,  380,
        0,    0,    0,    0,  380,  380,    0,  380,   94,  380,
      380,  380,  165,  168,  169,  170,  167,  166,    0,  380,

      380,  380,    0,  380,  380,    0,    0,  380,    0,  380,
        0,    0,    0,    0,  380,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  380,  380,  380,
      380,    0,    0,    0,    0,  380,    0,  380,    0,    0,
        0,    0,    0,  380,    0,  380,  380,    0,    0,    0,
        0,   96,  380,  380,  380,  154,  380,  380,    0,  380,
      380,  380,    0,    0,   71,   85,    0,    0,    0,    0,
        0,    0,    0,   47,    0,    0,    0,   31,   10,    0,
        0,    0,    0,    0,    0,    0,   14,    0,   36,    0,
        0,   34,    0,    0,    0,    0,    0,    0,   11,    0,

       49,    0,   49,    0,  380,    0,    0,    0,  380,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      380,    0,    0,    0,    0,    0,    0,   98,    0,    0,
        0,    0,    0,    0,    0,    0,  380,  380,  380,    0,
        0,    0,    0,  380,    0,    0,  380,    0,  380,  380,
      380,  171,  174,  175,  176,  173,  172,    0,    0,    0,
        0,    0,  380,  380,  380,    0,  380,  380,    0,    0,
        0,    0,    0,    0,  380,    0,    0,    0,    0,  380,
      380,    0,    0,    0,    0,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  265,    0,  380,  380,

      380,   90,    0,    0,    0,    0,  130,    0,  380,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  380,    0,
        0,    0,    0,    0,   93,  104,    0,    0,    0,    0,
      380,  380,  380,  380,    0,    0,  380,  380,  380,    0,
        0,   70,   84,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,   21,    0,    0,    0,    0,
       13,    0,    0,  380,    0,    0,  380,    0,    0,  259,
        0,    0,    0,    0,    0,    0,    0,  264,    0,  380,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  380,  133,  380,
      380,  380,    0,    0,  262,    0,    0,    0,    0,    0,
        0,  380,  156,  157,    0,    0,    0,    0,    0,    0,
      380,    0,  380,  380,    0,  380,    0,    0,    0,    0,
        0,    0,    0,    0,  380,    0,    0,    0,    0,  118,
      380,    0,    0,  261,    0,    0,    0,  238,    0,    0,
        0,    0,    0,  239,    0,    0,  276,    0,   91,  380,
        0,    0,  263,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  267,    0,  268,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  260,    0,  380,  380,  380,
        0,    0,    0,  100,  380,    0,  266,    0,   85,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
        0,    0,    0,  270,    0,    0,    0,    0,    0,    0,
        0,  275,  380,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  164,    0,    0,    0,    0,    0,    0,    0,
      134,  380,  380,  380,    0,    0,    0,  273,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  380,  380,    0,    0,    0,    0,    0,    0,
      380,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  380,    0,    0,
        0,  272,    0,    0,  240,    0,    0,  110,    0,  241,
        0,    0,    0,    0,  380,    0,    0,    0,  274,    0,
        0,    0,  324,    0,    0,    0,    0,    0,    0,    0,
      278,    0,  279,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  271,  380,  380,  380,    0,    0,    0,
        0,  269,    0,   97,    0,    0,  277,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   47,    0,    0,   32,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
        0,    0,   39,    0,    0,    0,    0,    0,    0,    0,
      281,    0,    0,    0,    0,  187,  188,    0,    0,  184,
        0,    0,    0,  380,    0,  194,  195,    0,    0,  191,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      380,  380,    0,    0,  284,    0,    0,    0,    0,  113,
        0,    0,    0,    0,    0,  201,  202,    0,    0,  198,
        0,    0,    0,    0,    0,  380,    0,    0,    0,    0,

        0,    0,  102,    0,    0,    0,    0,    0,    0,  208,
      209,    0,    0,  205,    0,    0,    0,    0,    0,    0,
        0,  119,  380,    0,  283,    0,    0,    0,    0,  242,
      150,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,  285,    0,    0,    0,    0,    0,    0,    0,    0,
      215,  216,    0,    0,  212,    0,    0,    0,    0,    0,
        0,    0,    0,  222,  223,    0,    0,  219,    0,  282,
        0,    0,  380,  105,   99,  177,  178,  179,  180,  181,
      182,  230,  236,  237,  370,    0,  280,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,   37,    0,    0,   35,    0,
        0,    0,    0,   23,    0,    0,    0,    0,    0,  286,
        0,    0,    0,    0,    0,    0,  189,    0,    0,    0,
      106,    0,    0,  196,    0,  146,    0,    0,  161,    0,
      160,    0,    0,  139,  380,  380,    0,  289,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  203,    0,    0,    0,  111,    0,  380,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  210,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  380,  288,    0,    0,    0,    0,  243,    0,    0,
        0,    0,    0,    0,    0,    0,  290,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  217,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  224,  287,    0,
        0,    0,  380,    0,    0,    0,  112,    0,    0,    0,
        0,    0,  357,    0,    0,    0,    0,    0,    0,  360,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   18,
       25,    0,    0,   22,    0,    0,    0,   12,    0,    0,
        0,    0,  351,    0,    0,    0,    0,    0,    0,    0,
      185,    0,    0,    0,    0,  192,    0,    0,  163,  162,

      143,    0,    0,  380,  108,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  199,    0,    0,    0,  147,  380,  256,  257,    0,
        0,  244,    0,    0,    0,    0,    0,    0,    0,  206,
        0,    0,  247,    0,    0,    0,  122,  125,    0,    0,
      117,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  337,    0,    0,    0,    0,    0,    0,    0,
        0,  129,  131,    0,    0,  213,    0,    0,    0,    0,
        0,    0,    0,    0,  220,    0,    0,    0,    0,  380,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  331,
        0,  186,    0,    0,  336,    0,  193,  148,    0,  141,
        0,    0,    0,  136,    0,    0,    0,    0,    0,  334,
        0,    0,    0,    0,    0,    0,    0,  250,    0,    0,
      200,    0,    0,    0,  380,    0,  245,  258,    0,    0,
        0,  226,    0,  207,    0,    0,    0,  145,    0,    0,
        0,  121,    0,    0,    0,    0,    0,  333,    0,  149,
        0,    0,    0,  297,  329,    0,    0,    0,    0,    0,

        0,  335,    0,    0,    0,  214,    0,  339,    0,    0,
      340,    0,    0,  221,    0,    0,    0,    0,   95,    0,
        0,    0,    0,    0,  338,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  291,  323,    0,
      296,  328,    0,    0,    0,  137,  138,    0,    0,    0,
        0,  294,  326,    0,    0,  253,    0,    0,    0,    0,
      251,    0,    0,    0,  380,  246,  227,    0,  228,    0,
        0,    0,  248,  144,    0,    0,    0,    0,    0,    0,

        0,    0,  293,  325,    0,    0,  308,  158,    0,    0,
      295,  327,    0,  132,  332,  299,    0,  300,    0,  159,
        0,    0,  292,    0,    0,  341,    0,  298,  330,    0,
        0,    0,    0,  342,    0,    0,    0,    0,    0,    0,
        0,  343,    0,    0,    0,    0,  344,    0,    0,  345,
        0,    0,    0,    0,    0,    0,   27,   38,   29,   16,
        0,    0,    0,  302,  307,    0,    0,    0,    0,    0,
        0,  305,    0,  254,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  225,  249,  128,  124,    0,
        0,    0,    0,    0,    0,  304,    0,    0,  306,  310,

      311,    0,    0,  303,  301,    0,  309,  353,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   19,   26,    0,    0,    0,    0,
        0,  313,    0,    0,    0,    0,    0,  316,  255,  153,
        0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  315,    0,  317,    0,
      314,  312,    0,    0,    0,  358,    0,    0,    0,    0,
        0,    0,  361,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  318,    0,    0,    0,    0,  321,  151,
        0,    0,    0,    0,    0,  229,    0,    0,    0,    0,

        0,  126,  120,  320,  322,  319,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  140,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  359,    0,    0,    0,    0,    0,  362,    0,
        0,    0,    0,    0,    0,    0,   28,   30,   17,    0,
      142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      232,    0,  123,  127,    0,    0,  347,    0,  365,    0,
        0,  348,    0,    0,  349,    0,  350,    0,    0,    0,
        0,    0,    0,  233,    0,  234,    0,    0,    0,    0,

        0,    0,    0,  356,    0,    0,    0,    0,    0,    0,
        0,  231,  354,  346,    0,    0,  363,  367,  368,  369,
        0,  109,    0,    0,    0,    0,    0,    0,  152,  235,
        0,    0,    0,    0,    0,    0,    0,    0,  355,  366,
        0,  352,    0,  364,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    1,    1,    9,   10,
       11,    1,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,    1,   32,   33,   34,   34,   35,   36,   37,
        8,    8,   38,   39,    8,   40,    8,   41,    8,   42,
        8,    8,   43,   44,    8,   45,    8,   46,   47,   39,
       48,   49,    1,   50,    8,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,    1,   78,    1,    1,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,    1,    1,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
       82,   82,   82,   82,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[83] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    4,    5,    1,
        1,    1,    1,    1,    6,    4,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    1,    1,    1,
        8,    1,    9,    9,   10,   11,   10,   12,    4,    4,
        4,   13,    4,    4,    4,    4,    4,    1,   14,    1,
        9,    9,    9,   10,   11,   10,    4,    4,   12,    4,
        4,    4,    4,    4,    4,   13,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    4,
        4,    4
    } ;

static yyconst flex_int16_t yy_base[2289] =
    {   0,
        0,    0,   80,   87,   94,  101,  113,  124,   96,  105,
      162,  165, 4214, 4215, 4215, 4215, 4215,    0,    4, 4215,
     4215, 4215,   37, 4215,  158,  203,  258,  159, 4215,    7,
     4215,  160,  307,   13,  155,  110,  209,  134,  253,  281,
      205,  244,  210,  150,  288,  310,  299,  313,  349,  317,
      415,  341,  387,  345,  337,  405,  383, 4215, 4215, 4134,
     4133, 4132, 4215, 4215, 4215, 4215, 4215,  249, 4162, 4215,
     4215,  276,    0, 4215, 4215,  465,    0, 4215, 4215,  475,
        0,  327, 4130, 4129, 4128, 4132,   46, 4150,   41,  481,
      532,  592, 4215,   79, 4215,  424,  151,   95,  106, 4145,

     4140,  128, 4147,  183, 4146,  294,  454,  164,  646,  369,
      707,  412,  431,  438,  460,  775,    0,  484, 4121, 4120,
     4119,  175,  479,  637,  540,  500, 4118, 4117, 4116,  544,
      659,  509,  666, 4126, 4135,  523,  517,  575,  569,  560,
      654,  578,  658,  663,  601,  671,  631,  666,  677,  563,
      683,  680,  722,  690,  686,  699,  742,  736,  752,  782,
      765,  761,  776,  787,  796,  802,  821,  791,  799,  837,
      725,  830,  818,  834,  838,  842,  852,  859,  866,  862,
      879,  885,  870,  902,  897,  905,  889,  812,  911,  908,
     4113, 4112,  978, 4111, 4110, 4109, 4139,  981, 4107, 4106,

     4105,    0, 4215, 4215, 4215, 4215, 4215, 4215, 4215, 4215,
     4215,    0,    0, 4215, 4215, 4215, 4215, 4215, 4215, 4215,
     4215, 4215,    0, 4128, 4127, 4109, 4109, 4109, 4123, 4106,
      214, 1049, 4215,  993, 4215, 4215, 4215, 4215, 4161,    0,
      208, 4215, 1006, 4215, 4111, 4106, 4103, 4121,  235, 4112,
     4115, 4103, 4104, 4114, 4096,  243, 4100,   44, 4093, 4112,
      256,  998, 1022, 1070, 1043,    0, 1066, 4215, 4083, 4082,
     1049, 4081, 4080, 4079, 1077,  693, 1041, 1085, 1103, 4078,
     4077, 1115, 1120,  918, 1111, 4076, 4075, 4074, 4097, 4083,
     1092,  921, 1100, 1104, 1096, 1118, 1124, 1129, 1132,  969,

     1121, 1165, 1138, 1153, 1150, 1067, 1158, 1168, 1161, 1174,
     1177, 1193, 1171, 1196,  468, 1190, 1207, 1204, 1199, 1210,
     1217, 1213, 1239, 1242, 1245, 1250, 1253, 1288, 1291,  268,
     1186, 1294, 1256,  191, 1267, 1234, 1259, 1280, 1297, 1272,
     1303, 1276, 1310, 1330, 1336, 1283, 1316, 1319, 1322, 1345,
     1327, 1352, 1349, 1355, 1359, 1333, 1369, 1374, 1377, 1392,
     1395, 1380, 4071, 1436, 4215, 4070, 4069, 1450, 4215, 4068,
     4067,    0,    0, 4092, 4074, 4078, 4072, 4070, 4070, 4069,
     1409, 1453,  259, 1462, 1454, 4073, 4086, 4083, 4066, 4129,
     4070, 4070, 4069, 4068, 4074, 4077, 4069, 4065, 4074, 4062,

     4064, 4052, 4053, 4052, 4068, 4063, 1481, 1455,  386,  496,
     1519, 4038, 1496, 4037, 4036, 1518, 4035, 4034, 4033, 1484,
     4032, 1531, 4031, 4030, 4029, 1534, 4028, 4027, 4054, 4039,
     1446, 1495, 1499,  324, 1488, 1506, 1492, 1503, 1509, 1514,
     1523, 4041, 1538, 1541, 1527, 1550, 1579, 1544, 1389, 1547,
     1563, 1579, 1574, 1567, 1571, 1594, 4035,  245,  417, 4046,
     1626, 1585, 1582, 1599, 4030, 1589, 1607, 1644, 1658, 1603,
     1676, 1637, 1622, 1655,  365, 4031, 4027,  343, 1638, 4033,
     4031, 1650, 1647, 1655, 1641, 1687, 1679, 1672, 1683, 1687,
      384,  423, 1693, 1698, 1707, 1702, 1736, 1723, 1690, 1719,

     1726, 1729, 1743, 1733, 1738, 1762, 1748, 1751, 1755,  475,
     4016, 4015,    0,    0, 4022, 4078, 4030, 4076, 4021, 4074,
     4073, 1831,  313, 4016, 4010, 4026, 4014, 1807, 4215, 4017,
     4027, 4025, 4215, 4017, 4013, 4022, 4013, 4010, 4005, 4022,
     4019, 4002, 4006, 4001, 1860,  553, 1873, 1883, 1896, 3989,
     1843, 3988, 3987, 1873, 1910, 3986, 3985, 3984, 4001, 3988,
     1861, 3995, 3997, 3994, 3992, 1875, 3992, 3990, 1878, 1904,
     1780, 1784, 1854, 1916, 1923, 3989,  319,  729, 1931, 1881,
     3988, 3990, 3987, 3985, 1884, 1935, 3998, 1920, 1890, 1954,
     1926, 1958, 3972, 3971, 3970, 3969, 3968, 3967, 1957, 1900,

     1938, 1961, 3977, 1965, 1968, 1999, 3971, 1979, 1959, 2010,
     3975, 3977, 3974, 3972, 1974, 3971, 3973, 3970, 3968, 3964,
     3967, 3962, 3976, 3964, 3962, 3956, 3961, 1999, 1993, 2004,
     2014, 3959, 3961, 3958, 3956, 2007, 3961, 2019, 2045, 3955,
     3953, 3953, 3951, 2022, 2054, 2040, 2035, 3950, 3952, 3949,
     3947, 1906, 2044, 2053, 2048, 2056, 2072, 2059,  511, 2075,
     2083, 2088, 3947, 3945,    0,    0, 3939, 2094, 3953, 2106,
     3943,  382, 1061, 2137,  525, 3955, 3991, 3953, 4215,  347,
     3944, 3937, 3946, 3949,   89, 3942, 4215, 3935, 3928, 3942,
     3941, 4215, 3937, 3923, 3924, 3936, 3935, 3925, 4215, 2163,

     2140, 2180, 2155, 3909, 2151, 3908, 3920, 3971, 2154, 3913,
     3918, 3912, 3917,  518, 3922, 3927, 3920, 3918, 3906, 3911,
     2138,  613, 3916, 3921, 3914, 3912, 3908, 2064, 3916, 3915,
     3903, 3901, 3903, 3899, 3901, 1029, 2192, 2143, 2157, 3891,
     3896, 3890, 3895, 2069, 3941, 3889, 2146, 3886, 2162, 2199,
     2210, 4215, 4215, 4215, 4215, 4215, 4215,  790, 3897, 3902,
     3895, 3893, 2178, 2184, 2214, 3937, 2166, 2227,  821, 3892,
     3897, 3890, 3888, 3881, 2181, 3871, 3892, 3888, 3883, 2207,
     2188, 3870, 3875, 3869, 3874, 2171, 3866, 3871, 3865, 3870,
     3865, 3863, 3866, 3872, 3859, 3864, 3911, 3869, 2231, 2220,

     2223, 2196, 3854, 3859, 3853, 3858, 2240, 3857, 2243,  861,
     3862, 3867, 3860, 3858, 3846, 3851, 3844, 3849, 2257,  899,
     3854, 3859, 3852, 3850, 2234, 2237, 3837, 3842, 3836, 3841,
     2261, 2264, 2251, 2268, 3840, 3838, 2271, 2248, 2295, 3832,
     3837, 4215,    0, 3845, 3847, 3827, 3832, 3837, 3881, 3842,
     3822, 3827, 3832, 3876, 3837, 3823, 3828, 3834, 3820, 3825,
      478, 3813, 3828, 3819, 3816, 3811, 3823, 3824, 3806,  585,
     3824, 3822, 3802, 3817, 4215, 4215, 3857, 3799, 3814, 3798,
     4215, 3853, 3801, 2288, 3800, 3792, 2277, 3811, 3811, 3845,
     3803, 3794, 3788, 3806, 3796, 3790, 3800, 3837, 3795, 2301,

     3786, 3780, 3798, 3788, 3782, 3792, 3790, 3793, 3785, 3785,
     3770, 3775, 3768, 3773, 3775, 3766, 3776, 2274, 2284, 2308,
     2318, 2324, 3782, 3782, 3816, 3774, 3760, 3755, 3760, 3763,
     3761, 2347, 2292, 2304, 3760, 3754, 3772, 3762, 3756, 3766,
     2365, 3802, 2332, 2321, 2355, 2338, 2362, 3753, 3747, 3765,
     3755, 3749, 3759, 3798, 2378, 3758, 3750, 3740, 3754, 2313,
     2357, 3755, 3755, 3789, 3747, 3751, 3751, 4215, 3744, 3749,
     3729, 3730, 3783, 4215, 3739,  866, 3779, 3725, 2360, 2368,
     3741, 3741, 3775, 3733, 1997, 3719, 3723, 3717, 3735, 3725,
     3719, 3729, 3766, 3724, 3764, 3722, 3709, 3712, 3706, 3724,

     3714, 3708, 3718, 3719, 3719, 3753, 3711, 2371, 2374, 2393,
     1289, 3697, 3702, 2381, 2388, 3748, 3748, 3706,    0, 3748,
     3701, 3701, 3697, 3701, 1769, 3690, 3686, 3678, 3681, 3658,
     3665, 3658, 3663, 3653, 3646, 3649,  933, 3637, 3643, 3631,
     3621, 3633, 3621, 3627, 3615, 3606, 3611, 3587, 3602, 3597,
     3581, 3574, 3587, 3570, 3632, 3564, 3562, 3520, 3523, 2384,
     3507, 3489,  910, 3533, 3479, 3484, 3466, 3478, 3454, 3452,
      976,   75, 2402,  140,  152,  145,  200,  193,  261,  272,
      373,  426, 4215,  436,  475,  492,  523,  528,  532,  585,
     2396, 2414, 2409, 2418,  611,  609, 1125,  668,  622,    0,

      640,  655,  709,  686,  714,  727,  747,  765,  753,  784,
     2448,  776, 2458, 2434,  786,  832,  860,  893,  891,  900,
     2425,  916,  917,  934,  937,  959,  982,  987, 1001, 1008,
     1028, 2454, 1052, 1069, 1090, 1082, 1101, 2439, 1127, 1138,
     1405, 1200, 1155, 1155, 4215, 1154, 1252, 4215, 2469, 4215,
     1253, 1248, 1298, 1293, 2449, 1305, 1317, 1778, 1377, 1343,
     1341, 1362, 1429, 1386, 1398, 1426, 1466, 1461, 1480, 1827,
     1537, 1927, 1540, 1488, 1509, 1527, 1609, 1623, 1614, 1640,
     1635, 1643, 1696, 1700, 2453, 2464, 2467, 1678, 2533, 2467,
     1688, 1729, 1693, 2446, 1677, 1975, 1769, 1727, 1741, 1769,

     1775, 1772, 1795, 1796, 1809, 1817, 1822, 1837, 1920, 1914,
     1928, 1933, 1940, 1976, 1982, 2003, 2506, 2000, 2006, 4215,
     2008, 2034, 2093, 2086, 2093, 2107, 2113, 2186, 2193, 4215,
     2213, 2212, 4215, 2217, 2237, 2263, 2311, 2332, 2329, 2355,
     2399, 2374, 2367, 2411, 2381, 4215, 4215, 2391, 2411, 4215,
     2435, 2429, 2473, 2490, 2442, 4215, 4215, 2456, 2453, 4215,
     2467, 2466, 2478, 2493, 2486, 2495, 2488, 2490, 2502, 2508,
     2506, 2500, 2497, 2512, 2552, 2518, 2514, 2555, 2561,    0,
     2501, 2504, 2530, 2510, 2524, 4215, 4215, 2530, 2515, 4215,
     2528, 2532, 2538,    0, 2529, 2525, 2526, 2546, 2527, 2534,

     2536, 2536, 2522, 2540, 2539, 2559, 2545, 2544, 2558, 4215,
     4215, 2561, 2545, 4215, 2551, 2555, 2554, 2555, 2554, 2568,
     2560, 2607, 2606, 2570, 2610, 2576, 2569, 2611, 2576, 4215,
     4215, 2568, 2571, 2575, 2580, 2582, 2567, 2587, 2580, 2560,
     2588, 2628, 2594, 2587, 2628, 2588, 2590, 2596, 2589, 2597,
     4215, 4215, 2600, 2584, 4215, 2604, 2597, 2638, 2607, 2600,
     2641, 2602, 2607, 4215, 4215, 2610, 2594, 4215, 2610, 2650,
     2616, 2649, 2593, 2590, 2596, 4215, 4215, 4215, 4215, 4215,
     4215, 4215, 4215, 4215, 4215, 2660, 2664,    0, 2630, 2623,
     2664, 2620, 2632, 2628, 2620, 2677, 2632, 2627, 2626, 2642,

     2635, 2627, 2684, 2640, 2647, 2631, 2688, 2650, 2634, 2691,
     2642, 2656, 2657, 2695, 4215, 4215, 2656, 2657, 4215, 2657,
     2649, 2645, 2656, 4215, 2651, 2658, 2648, 2649, 2661, 2705,
     2704, 2670, 2655, 2675, 2676, 2658, 4215, 2675, 2660, 2680,
     2652, 2684, 2666, 4215, 2667, 4215, 2681, 2684, 4215, 2685,
     4215, 2672, 2678, 2727, 2726, 2677, 2671, 2731, 2729, 2695,
     2680, 2700, 2704, 2738, 2739, 2689, 2691, 2691, 2693, 2711,
     2694, 4215, 2714, 2712, 2698,    0, 2713, 2711, 2716, 2704,
     2721, 2723, 2718, 2708, 2722, 2723, 2709, 2725, 2711, 2731,
     2713, 4215, 2713, 2720, 2716, 2717, 2729, 2719, 2720, 2724,

     2777, 2773, 2781, 2779, 2745, 2730, 2750, 4215, 2749, 2752,
     2749, 2735, 2755, 2792, 2757, 2742, 2797, 2795, 2761, 2746,
     2767, 2764, 2766, 2766, 2763, 2772, 2754, 4215, 2771, 2756,
     2776, 2774, 2759, 2779, 2761, 2781, 2764, 4215, 2819, 2817,
     2783, 2787, 2784, 2789, 2782, 2823,    0, 2789, 2774, 2794,
     2784, 2777, 4215, 2789, 2784, 2794, 2795, 2782, 2787, 4215,
     2799, 2795, 2805, 2790, 2802, 2791, 2798, 2810, 2798, 4215,
     4215, 2801, 2818, 4215, 2859, 2860, 2810, 4215, 2806, 2824,
     2808, 2820, 4215, 2824, 2862, 2831, 2829, 2866, 2831, 2822,
     4215, 2833, 2870, 2835, 2826, 4215, 2834, 2838, 4215, 4215,

     4215, 2837, 2878, 2874, 2819, 2838, 2884, 2853, 2851, 2888,
     2853, 2846, 2845, 2845, 2857, 2861, 2843, 2845, 2852, 2852,
     2854, 4215, 2850, 2858, 2863, 4215, 2857, 4215, 4215, 2861,
     2854, 4215, 2855, 2873, 2859, 2869, 2861, 2859, 2867, 4215,
     2880, 2882, 4215, 2879, 2865, 2881, 2925, 2928, 2920, 2876,
     2865, 2929, 2898, 2896, 2933, 2898, 2898, 2888, 2897, 2902,
     2893, 2939, 4215, 2909, 2911, 2946, 2915, 2913, 2950, 2915,
     2917, 4215, 4215, 2901, 2908, 4215, 2919, 2949, 2922, 2923,
     2953, 2925, 2927, 2917, 4215, 2963, 2932, 2930, 2931, 2932,
     2933, 2918, 2938, 2936, 2973, 2938, 2934, 2980, 2933, 2925,

     2932, 2946, 2932, 2930, 2988, 2941, 2933, 2940, 2992, 2993,
     2946, 2944, 2996, 2949, 2950, 2957, 2966, 2949, 2950, 2950,
     2968, 2971, 2970, 2959, 2966, 2975, 2973, 2960, 3006, 4215,
     2976, 4215, 2963, 3009, 4215, 2979, 4215, 4215, 3020, 3019,
     3013, 3018, 2979, 2959, 2989, 2992, 2990, 2977, 3023, 4215,
     2993, 2983, 2979, 2986, 3000, 2984, 3001, 4215, 2997, 2987,
     4215, 2987, 3003, 2993, 2995, 3005, 4215, 4215, 2991, 3006,
     3010, 3048, 3014, 4215, 3004, 2997, 3000, 4215, 3004, 3052,
     3006, 4215, 3007, 3022, 3020, 3010, 3057, 4215, 3027, 4215,
     3013, 3029, 3019, 4215, 4215, 3017, 3028, 3036, 3034, 3021,

     3067, 4215, 3037, 3022, 3068, 4215, 3026, 4215, 3041, 3028,
     4215, 3043, 3040, 4215, 3048, 3046, 3033, 3048, 3023, 3052,
     3082, 3055, 3042, 3088, 4215, 3058, 3049, 3047, 3060, 3057,
     3055, 3048, 3106, 3070, 3055, 3068, 3065, 3063, 3074, 3056,
     3074, 3068, 3059, 3077, 3071, 3069, 3065, 3063, 3064, 3087,
     3081, 3078, 3083, 3078, 3090, 3090, 3091, 4215, 4215, 3078,
     4215, 4215, 3079, 3093, 3089, 4215, 4215, 3093, 3093, 3098,
     3099, 4215, 4215, 3086, 3104, 4215, 3099, 3087, 3090, 3097,
     4215, 3146, 3147, 3108, 3149, 4215, 3148, 3114, 3150, 3099,
     3106, 3114, 4215, 4215, 3106, 3148, 3104, 3121, 3115, 3112,

     3122, 3123, 4215, 4215, 3110, 3125, 4215, 4215, 3126, 3127,
     4215, 4215, 3114, 4215, 4215, 4215, 3115, 4215, 3116, 4215,
     3131, 3132, 4215, 3119, 3120, 4215, 3135, 4215, 4215, 3122,
     3136, 3121, 3128, 4215, 3141, 3144, 3182, 3130, 3136, 3128,
     3135, 4215, 3148, 3151, 3152, 3139, 4215, 3154, 3141, 4215,
     3156, 3144, 3158, 3151, 3152, 3142, 4215, 4215, 4215, 4215,
     3162, 3160, 3147, 4215, 4215, 3148, 3146, 3160, 3151, 3166,
     3153, 4215, 3152, 4215, 3172, 3173, 3170, 3175, 3176, 3214,
     3177, 3165, 3181, 3167, 3185, 3221, 4215, 4215, 4215, 3173,
     3179, 3186, 3223, 3188, 3175, 4215, 3190, 3177, 4215, 4215,

     4215, 3192, 3179, 4215, 4215, 3180, 4215, 3233, 3191, 3189,
     3191, 3183, 3195, 3184, 3242, 3198, 3196, 3198, 3190, 3193,
     3200, 3193, 3202, 3195, 4215, 4215, 3196, 3197, 3209, 3199,
     3202, 4215, 3203, 3209, 3255, 3209, 3207, 4215, 4215, 4215,
     3201, 4215, 3224, 3225, 3228, 3212, 3230, 3227, 3232, 3220,
     3217, 3223, 3232, 3233, 3266, 3222, 4215, 3223, 4215, 3224,
     4215, 4215, 3225, 3241, 3244, 4215, 3237, 3233, 3239, 3232,
     3247, 3250, 4215, 3243, 3235, 3253, 3246, 3255, 3248, 3255,
     3256, 3245, 3252, 4215, 3247, 3261, 3291, 3251, 4215, 3300,
     3264, 3265, 3266, 3252, 3257, 3306, 3259, 3267, 3274, 3308,

     3274, 4215, 4215, 4215, 4215, 4215, 3277, 3268, 3260, 3269,
     3273, 3280, 3263, 3274, 3266, 3275, 3279, 3269, 3278, 3271,
     3280, 3285, 3286, 3281, 3281, 3279, 3283, 4215, 3290, 3282,
     3296, 3297, 3300, 3289, 3298, 3288, 3300, 3303, 3295, 3337,
     3291, 3298, 4215, 3304, 3309, 3295, 3305, 3308, 4215, 3309,
     3314, 3315, 3312, 3317, 3314, 3319, 4215, 4215, 4215, 3311,
     4215, 3300, 3326, 3309, 3310, 3325, 3313, 3327, 3332, 3329,
     4215, 3328, 4215, 4215, 3329, 3325, 4215, 3372, 3373, 3337,
     3329, 4215, 3324, 3331, 4215, 3332, 4215, 3381, 3341, 3333,
     3329, 3330, 3331, 4215, 3337, 4215, 3347, 3348, 3349, 3337,

     3338, 3346, 3353, 4215, 3354, 3355, 3356, 3358, 3356, 3345,
     3358, 4215, 4215, 4215, 3365, 3366, 3402, 4215, 4215, 4215,
     3351, 4215, 3365, 3366, 3358, 3359, 3356, 3357, 4215, 4215,
     3369, 3370, 3377, 3364, 3375, 3376, 3368, 3365, 4215, 4215,
     3377, 4215, 3380, 4215, 4215, 3435, 3449, 3463, 3477, 3491,
     3505, 3516, 3524, 3533, 3543, 3553, 3563, 3576, 3589, 3603,
     3616, 3624, 3629, 3637, 3647, 3654, 3659, 3665, 3670, 3678,
     3688, 3695, 3700, 3514, 3528, 3541, 3705, 3712, 3717, 3722,
     3727, 3551, 3561, 3598, 3732, 3737, 3742, 3747
    } ;

static yyconst flex_int16_t yy_def[2289] =
    {   0,
     2245,    1, 2246, 2246, 2247, 2247, 2248, 2248, 2249, 2249,
     2250, 2250, 2245, 2245, 2245, 2245, 2245, 2251, 2252, 2245,
     2245, 2245, 2245, 2245, 2253, 2245, 2252,   27, 2245, 2254,
     2245, 2252, 2252, 2255, 2252, 2252, 2245, 2245, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252,   51, 2252, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2256, 2245, 2245,
     2245, 2257, 2258, 2245, 2245, 2259, 2260, 2245, 2245, 2261,
     2251, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2262, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2263,   27,   27, 2252,
     2252, 2252, 2252, 2252, 2252,  109,   28, 2254, 2245, 2245,
     2245,   33, 2264, 2245, 2252, 2255, 2245, 2245, 2245, 2252,
     2245, 2265, 2245, 2245, 2245, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,   51,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2245, 2245, 2256, 2245, 2245, 2245, 2245, 2257, 2245, 2245,

     2245, 2258, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2266, 2260, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2267, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
       91, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2268,   92,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2263, 2245, 2245,  111, 2269,  116, 2245, 2245, 2245,
     2264, 2245, 2245, 2245, 2245, 2270, 2252, 2255, 2245, 2245,
     2245, 2252, 2245, 2271, 2265, 2245, 2245, 2245, 2245, 2245,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,

     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2245, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2245,
     2252, 2252, 2252, 2245, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2252, 2245, 2256, 2245, 2245, 2245, 2257, 2245, 2245,
     2245, 2272, 2273, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2274, 2268, 2245, 2245, 2275, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2276, 2269, 2277,
      111, 2245, 2264, 2245, 2245, 2270, 2245, 2245, 2245, 2252,
     2245, 2271, 2245, 2245, 2245, 2265, 2245, 2245, 2245, 2245,
     2252, 2245, 2252, 2245, 2252, 2252, 2252, 2252, 2252, 2252,
     2252, 2245, 2252, 2252, 2252, 2252, 2245, 2252, 2252, 2252,
     2252, 2252, 2252, 2252, 2252, 2252, 2245, 2245, 2245, 2245,
     2252, 2252, 2252, 2252, 2245, 2252, 2252, 2252, 2252, 2252,
     2252, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2252, 2245,
     2245, 2252, 2252, 2252, 2252, 2245, 2252, 2252, 2252, 2252,
     2245, 2245, 2252, 2252, 2252, 2252, 2245, 2252, 2252, 2252,

     2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2245,
     2245, 2245, 2278, 2279, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2277, 2245, 2245,  111, 2245,
     2270, 2245, 2245, 2252, 2271, 2245, 2245, 2245, 2245, 2245,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2245,
     2252, 2252, 2252, 2252, 2252, 2245, 2245, 2245, 2252, 2252,
     2245, 2245, 2245, 2245, 2252, 2252, 2245, 2252, 2252, 2252,
     2252, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252,

     2252, 2252, 2245, 2252, 2252, 2245, 2245, 2252, 2245, 2252,
     2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2252, 2252,
     2252, 2245, 2245, 2245, 2245, 2252, 2245, 2252, 2245, 2245,
     2245, 2245, 2245, 2252, 2245, 2252, 2252, 2245, 2245, 2245,
     2245, 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2245, 2252,
     2252, 2252, 2245, 2245, 2280, 2281, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2282, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2283, 2245, 2284, 2245, 2252, 2245, 2245, 2245, 2252, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2252, 2252, 2252, 2245,
     2245, 2245, 2245, 2252, 2245, 2245, 2252, 2245, 2252, 2252,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2252, 2252, 2252, 2245, 2252, 2252, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2252,
     2252, 2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2252,

     2252, 2252, 2245, 2245, 2245, 2245, 2252, 2245, 2252, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2245,
     2245, 2245, 2245, 2245, 2252, 2252, 2245, 2245, 2245, 2245,
     2252, 2252, 2252, 2252, 2245, 2245, 2252, 2252, 2252, 2245,
     2245, 2245, 2285, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2252, 2245, 2245, 2252, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2252, 2252,
     2252, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2252, 2252, 2252, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2245, 2252, 2252, 2245, 2252, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2252,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2252,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2252, 2252,
     2245, 2245, 2245, 2252, 2252, 2245, 2245, 2245, 2285, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2252, 2252, 2252, 2245, 2245, 2245, 2245, 2245, 2286,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2252, 2252, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2252, 2252, 2245, 2245, 2245,
     2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2286,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2287, 2245, 2252, 2245, 2245, 2245, 2245,

     2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2252, 2252, 2252, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2288, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2252, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2287, 2245, 2252, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2252, 2245, 2245, 2245, 2288, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2252, 2252, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2252, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2252, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2252, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,

     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245,    0, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245
    } ;

static yyconst flex_int16_t yy_nxt[4298] =
    {   0,
       14,   15,   16,   15,   14,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   19,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   29,   14,   30,   31,
       14,   14,   19,   32,   32,   19,   32,   33,   32,   34,
       35,   19,   32,   19,   36,   19,   19,   37,   14,   38,
       39,   40,   41,   42,   43,   44,   45,   19,   46,   19,
       19,   47,   48,   49,   50,   51,   19,   52,   53,   54,
       55,   56,   19,   57,   19,   19,   58,   59,   14,   60,
       61,   62,   64,   83,   84,   85,  119,  120,  121,   64,
     1253,   86,  127,  128,  129,   87,   64,  229,   74,   74,

      401,   75,  225,   64,   88,   89,  230,   74,   74,  226,
       75,  227,  402,   65,   65,   64,   65,   65,   65,  241,
       65,   65,   65,   65,   65,   65,   64,   67,   67,   65,
       67,   67,   67,   68,   67,   67,   67,   67,   67,   67,
       68,   69,  241,   67,   76,  247,   71,   71,   69,   71,
       71,   71,   72,   76,  871,   71,  248,   71,   71,  872,
       71,   71,   71,   72,   78,   78,   71,   78,   78,  249,
       79,  250,   90,   79,   91,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  134,  253,  130,   93,   83,
       84,   85,  254,  122,  122,   94,  122,  122,  122,  123,

      152, 1255,  122,  135,   82,  130, 1256,  124,  153,   82,
       80,  154, 1257,   80,  245,   82,   94,   95,  246,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   83,
       84,   85,   82,  256,   83,   84,   85,   82,   82,   83,
       84,   85,  131,  131,  383,  131,  131,  131,  132,  480,
      257,  131,  481,   97, 1258,   98,  133,   99,  100, 2245,
     1259,  101,  144,  383,  102,  103,  145,  146,  104,  147,
      105,  106,  107,  151,  108,  108,  108,  108,  108,  108,
      108,  108,  109,  109,   83,   84,   85, 2245,  390,   83,
       84,   85,  110,  111,  112,  398,  523,  113,  148,  594,

      114,  115,  149,  116,  136,  391,  137,  405,  150,  138,
      399,  110,  111,  112,  595, 1260,  139,  523,  140,  113,
      141,  406,  476,   83,   84,   85,  114,  115,  194,  195,
      196,  116,   83,   84,   85, 1261,  477,   83,   84,   85,
      122,  122,  155,  122,  122,  122,  123,  125,  142,  122,
      125,  143,  156,  675,  124,  199,  200,  201,  259,  260,
       83,   84,   85,  162,  261,  157,  158,   83,   84,   85,
      125,  159,  732,  160,  733,  161,  675,  163,   83,   84,
       85,  130,  567,  164,  169,  568,   83,   84,   85,   83,
       84,   85,   83,   84,   85,  174,   83,   84,   85,  165,

      185,  624,  183,  166,  625,  186,   83,   84,   85,  175,
      865,  176,  184,  167,  866,  620,   83,   84,   85,  168,
       83,   84,   85,  621,   83,   84,   85,  545,   83,   84,
       85,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170, 1262,  640,  177,  178,  641,  855,  190,   83,   84,
       85,  545,  179,  856,  857,  187,  180,  181,  242,  243,
      244,  182,   83,   84,   85,  171,   83,   84,   85,  188,
      204,  596,   82,  205,  189,   82, 1263,  242,  243,  244,
      215,  642,  172,  216,  643,  173,  597, 1264,  242,  263,
      244,   83,   84,   85,   83,   84,   85,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,  242,  263,  244,
       83,   84,   85,  206,  268,  278,  207,   83,   84,   85,
      208, 1037,  457,  217,  458, 1265,  218,  279,  209,  459,
      219,  460,  210,  663,  211,  212,  664,  547,  220,   83,
       84,   85,  221, 1266,  222,  223,  107, 1037,  231,  231,
      231,  231,  231,  231,  231,  231,  232,  232,  272,  273,
      274,  547,  861,  119,  120,  121,  233,  234,  235,  835,
      292,  236,  836, 1267,  237,  238,  277,  239, 1268,  127,
      128,  129,  892,  861,  282,  233,  234,  235,  286,  287,
      288,  291,  893,  236,  547,  277,   83,   84,   85, 1269,

      237,  238,   83,   84,   85,  239,  107,  282,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  547,   83,
       84,   85,  294,   83,   84,   85,  233,  234,  235,  293,
      296,  236,  295,  306,  237,  238,  298, 1046, 1270,   83,
       84,   85,   83,   84,   85,  233,  234,  235,   83,   84,
       85,  301, 1047,  236,   83,   84,   85,   83,   84,   85,
      237,  238,  109,  109,  109,  109,  109,  109,  109,  109,
      275,  275, 1274,  275,  275,  275,  276,  901, 1275,  275,
       83,   84,   85, 1278,  124,   82, 1279,  902,   82,   82,
     1281,   82,  283,  283,  303,  283,  283,  283,  284,  131,

      131,  283,  131,  131,  131,  132,  124,   82,  131, 1282,
       83,   84,   85,  133,   82,   82,  299,  300,  304,   82,
      264,  297, 1283,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,   83,   84,   85,  302,   83,   84,   85,
     1284,  308,   83,   84,   85,   83,   84,   85,  305,  313,
       83,   84,   85,  307,  312,  315,   83,   84,   85,   83,
       84,   85,   83,   84,   85,   83,   84,   85,  314,   83,
       84,   85,  417,  418,  419, 1285,  309,  335,   83,   84,
       85, 1286,  734,  310,  735,  311,   83,   84,   85,  266,
      316,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,   83,   84,   85,   83,   84,   85,  267,  267,  267,
      267,  267,  334,  317, 1287,   83,   84,   85,  277, 1288,
     1289,   83,   84,   85,  323,  267,  267,  267,  267,  267,
      267,   83,   84,   85,  330,  322,  282,  277, 1290,  324,
       83,   84,   85,  318,   83,   84,   85,  325,  326, 1294,
      319,  320,  333,  321,  935,   83,   84,   85,  328,  282,
     1297,   83,   84,   85,  936,  327,   83,   84,   85,  338,
       83,   84,   85,  360,  329,   83,   84,   85,   83,   84,
       85,   83,   84,   85, 1151,  948,  331,   82,  336, 1298,
      332,   83,   84,   85,  337,  949,  339,   83,   84,   85,

       83,   84,   85,  340,   82,  342,  343,   82,  341,   83,
       84,   85,  348,   83,   84,   85,  346,   83,   84,   85,
      344,   83,   84,   85, 1299,  987,  345, 1152, 1242,  349,
      350,   83,   84,   85,  432,  988,  347,  354,   83,   84,
       85,   83,   84,   85,  351,   83,   84,   85,  352,   83,
       84,   85,  355,  353, 1300, 1301,  359, 1302,   83,   84,
       85,  361,  358,  998,   83,   84,   85,  357,   83,   84,
       85, 1243,  356,  999, 1304,  362,   83,   84,   85, 1217,
     1305,   83,   84,   85,   83,   84,   85,   83,   84,   85,
       83,   84,   85,  364, 1251, 1308,  368,  423,  424,  425,

       83,   84,   85, 1306, 1307,  365,  264, 1217,  369,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  384,
     1309,  440,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  242,  263,  244,  407, 1310, 1252,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,   83,   84,
       85,  242,  263,  244, 1311, 1312, 2245,  194,  195,  196,
      199,  200,  201,  107,  413,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232, 1313,  283,  110,  420,  112,
      410,  915, 1314,  233,  234,  235,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  110,  916,  112,  420,

      278,  917,  233,  234,  235,  113, 1318,  411,  114,  115,
      283,  283,  279,  283,  283,  283,  284,  434,  448,  283,
       83,   84,   85, 1319,  124,  858,  426,  113,  272,  273,
      274,  411,  859,  860,  114,  115,  283,  283,  131,  283,
      283,  283,  284, 1276, 1320,  283,   83,   84,   85,  110,
      124,  112, 1321,  283,  283, 1322,  283,  283,  283,  284,
      435,  431,  283,  447,  127,  128,  129,  124,  110,  433,
      112,   83,   84,   85,  437,   83,   84,   85,  442,   83,
       84,   85,  438,   83,   84,   85, 1277,  436, 1324,  441,
      286,  287,  288,  439,   83,   84,   85,   83,   84,   85,

       83,   84,   85,   83,   84,   85,  445, 1325,   83,   84,
       85,   83,   84,   85,  446, 1328, 1329,   83,   84,   85,
      449,  443,  451,  465, 1330,  455,  444,  453, 1331,   83,
       84,   85,   83,   84,   85,  452,  450,   83,   84,   85,
       83,   84,   85,  454,   83,   84,   85,   83,   84,   85,
       83,   84,   85,   83,   84,   85,   83,   84,   85,  461,
      456,  462,  463,  472,  466,   83,   84,   85,  464,   83,
       84,   85,   83,   84,   85,   83,   84,   85,   83,   84,
       85,  467,  468,   83,   84,   85,   83,   84,   85,   83,
       84,   85,   83,   84,   85,  469,   83,   84,   85,  471,

      470,  474, 1332, 1336,  475,  483, 1337,  478, 1188, 1189,
      486,  473, 1190,   83,   84,   85, 1338,  479,   83,   84,
       85,   83,   84,   85,   83,   84,   85,  482,  484,   83,
       84,   85,   83,   84,   85,   83,   84,   85,   83,   84,
       85,  485,  487,  491, 1191,  489,   83,   84,   85,  492,
      493,   83,   84,   85,  488,   83,   84,   85,  497,   83,
       84,   85,   83,   84,   85, 1339, 1341,   83,   84,   85,
       83,   84,   85,   83,   84,   85,   83,   84,   85,  490,
      496,  498,   83,   84,   85,  494, 1342,  504,  495,   83,
       84,   85, 1345,  510, 1346,   83,   84,   85,   83,   84,

       85,   83,   84,   85,  499, 1347,   83,   84,   85,   83,
       84,   85,   83,   84,   85,   83,   84,   85,  501,  502,
     1348,  500,  503, 1326,   83,   84,   85,  507,   83,   84,
       85,   83,   84,   85,   83,   84,   85,  505,   83,   84,
       85,  506,  508,  233, 1349,  235,  509, 1350,   83,   84,
       85,  364, 1351,   83,   84,   85,   83,   84,   85,   83,
       84,   85,  233,  365,  235,  368, 1327,  410,   83,   84,
       85,   83,   84,   85,   83,   84,   85,  369,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  242,  242,
      244,  244,  236, 1352,  522,  237,  238,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  242,  242,  244,
      244,  413,  566,  561,  236,  194,  195,  196,  522,  570,
     1353,  237,  238,  283,  554,   83,   84,   85, 1354,  199,
      200,  201,  548,  551, 1355,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  275,  555,  554,  562,  426,
      563,  577, 1358,  564,  578, 1361,  565,  569,  283,  572,
     1362,  131,  573,   83,   84,   85,  571,   83,   84,   85,
     1363,   83,   84,   85,  574,  272,  273,  274,   83,   84,
       85, 1364,   83,   84,   85,   83,   84,   85,   83,   84,
       85,  575,  587,   83,   84,   85,  579,  417,  418,  419,

      580,  504,   83,   84,   85,  585,   83,   84,   85,  592,
      423,  424,  425,  286,  287,  288,  586,   83,   84,   85,
       83,   84,   85,   83,   84,   85,   83,   84,   85,   83,
       84,   85,  581,  588,  582,  589,  590,  583,  591,  599,
      584,  600,   83,   84,   85,  601,   83,   84,   85,  602,
       83,   84,   85,   83,   84,   85,  604,  606,   83,   84,
       85,   83,   84,   85,   83,   84,   85,  605,   83,   84,
       85,  607,  608,   83,   84,   85, 1365, 1366,   83,   84,
       85, 1367,   83,   84,   85,  637,   83,   84,   85,  609,
      611,  610,  612,  615, 1368,  613, 1369,  629,  614,  631,

      639,   83,   84,   85,  628,   83,   84,   85,  616,  630,
      617,  645, 1370,  618, 1371, 1372,  619,   83,   84,   85,
       83,   84,   85,   83,   84,   85,   83,   84,   85,   83,
       84,   85, 1376, 1377,   83,   84,   85,   83,   84,   85,
      632,  638,  633, 1385, 1386,  634,  636,  653,  635, 1387,
     1388,   83,   84,   85,  647,   83,   84,   85,   83,   84,
       85,  644,   83,   84,   85,  646,   83,   84,   85,   83,
       84,   85,   83,   84,   85,  659,  654,   83,   84,   85,
      655,   83,   84,   85, 1391, 1392,   83,   84,   85,  648,
      652,  649,  658,  727,  650, 1393, 1343,  651,   83,   84,

       85,  656,   83,   84,   85,   83,   84,   85,   83,   84,
       85,  657,   83,   84,   85,  660,  662,   83,   84,   85,
      661, 1394,   83,   84,   85, 1395, 1396,   83,   84,   85,
       83,   84,   85, 1203,   83,   84,   85, 1204,  728, 1344,
     1205,   83,   84,   85,  548, 1356, 1397,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  680,  551,   83,
       84,   85,  681,   83,   84,   85, 1398, 1399,  682,  683,
      275, 1400,  684,  700, 1401,  685,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  702, 1402, 1357,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674, 2245,
      705,  709,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  417,  418,  419,  555,  714,  715,  721,  729,
      110,  705,  112,   83,   84,   85,  730,  283,  744,  716,
       83,   84,   85,  717,  736, 1359,  737,  718,  739,  110,
      763,  112,   83,   84,   85,  722,  723,   83,   84,   85,
       83,   84,   85,   83,   84,   85,  745,  748,  724,   83,
       84,   85,  725,  747, 1403,  750,  726,  751, 1404,   83,
       84,   85, 1405, 1406,  749,   83,   84,   85, 1360,  423,
      424,  425,  764, 1389, 1407,   83,   84,   85,  738,   83,

       84,   85,   83,   84,   85,   83,   84,   85,  758,  759,
       83,   84,   85,  776,   83,   84,   85,   83,   84,   85,
      767,  760,  768,  777,  765,  761,  778,  780,  786,  762,
     1408,  779, 1409,   83,   84,   85, 1390,   83,   84,   85,
       83,   84,   85,  775,   83,   84,   85,   83,   84,   85,
      769,  770,  799,   83,   84,   85,  801, 1410,   83,   84,
       85, 1160,  800,  771, 1411,  781,  802,  772, 1161, 1162,
      807,  773,   83,   84,   85, 1412,  819, 1413,   83,   84,
       85,  809,  927,   83,   84,   85,   83,   84,   85,   83,
       84,   85,  825,   83,   84,   85,  810,  811,   83,   84,

       85,   83,   84,   85,  826,  820,  821,  832, 1414,  812,
      573,  831,  834,  813,   83,   84,   85,  814,  822,   83,
       84,   85,  823,   83,   84,   85,  824,   83,   84,   85,
      833,  837,   83,   84,   85,   83,   84,   85,   83,   84,
       85,  838,  839,   83,   84,   85, 1415, 1416,   83,   84,
       85,   83,   84,   85,   83,   84,   85, 1417,  845,  930,
      846, 1418,   83,   84,   85,  847,  848,   83,   84,   85,
      850,  233,  851,  235,  242, 1419,  244,  852,  853,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  242,
      233,  244,  235,  242,  884,  244,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  887,  900,  242,  918,
      244,  922,  919,  921,  932,  942,  946,   83,   84,   85,
      884,  933,   83,   84,   85,   83,   84,   85,  934,  960,
       83,   84,   85,   83,   84,   85,   83,   84,   85,  941,
      947,   83,   84,   85,  978,   83,   84,   85,  955,  920,
       83,   84,   85,  985, 1420,  961, 1421,   83,   84,   85,
       83,   84,   85,   83,   84,   85,  943,   83,   84,   85,
      997,   83,   84,   85,  979,   83,   84,   85,   83,   84,
       85, 1011, 1422,  944, 1423, 1424,   83,   84,   85,   83,
       84,   85,  980,   83,   84,   85, 1091,  573, 1425,   83,

       84,   85,   83,   84,   85, 1010,   83,   84,   85, 1015,
       83,   84,   85,   83,   84,   85,   83,   84,   85,   83,
       84,   85,   83,   84,   85, 1008, 1016,   83,   84,   85,
       83,   84,   85, 1009,  282, 1426,   83,   84,   85, 1014,
       83,   84,   85,   83,   84,   85, 1060,   83,   84,   85,
       83,   84,   85,   83,   84,   85,   83,   84,   85, 1073,
     1104, 1427,  282,   83,   84,   85, 1092,   83,   84,   85,
     1093,   83,   84,   85,   83,   84,   85, 1094, 1111, 1114,
       83,   84,   85,   83,   84,   85, 1113,   83,   84,   85,
     1121, 1133,   83,   84,   85, 1428, 1429,   83,   84,   85,

       83,   84,   85,   83,   84,   85, 1115, 1116, 1117, 1430,
     1118,   83,   84,   85, 1431, 1122, 1119,   83,   84,   85,
     1123, 1138, 1155, 1120, 1432, 1433,   83,   84,   85, 1434,
     1124, 1273, 1186, 1125, 1185, 1435,   83,   84,   85,   83,
       84,   85, 1194, 1436,   83,   84,   85,   83,   84,   85,
       83,   84,   85,   83,   84,   85, 1187,   83,   84,   85,
       83,   84,   85,   83,   84,   85, 1254,   83,   84,   85,
     1271, 1295,   83,   84,   85,   83,   84,   85, 1272, 1303,
     1437,   83,   84,   85, 1296, 1438, 1382, 1439,   83,   84,
       85, 1440, 1383,   83,   84,   85, 1442,   83,   84,   85,

     1291, 1323, 1340, 1292,   83,   84,   85, 1315, 1443, 1316,
     1293, 1373, 1317,   83,   84,   85, 1374, 1384,   83,   84,
       85, 1333, 1444, 1445, 1334,   83,   84,   85,   83,   84,
       85, 1335,   83,   84,   85, 1446, 1375,   83,   84,   85,
      233, 1447,  235,   83,   84,   85,   83,   84,   85, 1378,
     1379, 1380, 1381, 1441, 1448, 1449, 1450, 1451, 1452,  233,
     1453,  235, 1454, 1455, 1456, 1457, 1458, 1459, 1460,   83,
       84,   85, 1461, 1462, 1463, 1464, 1465, 1469, 1470,   83,
       84,   85, 1471, 1466, 1472,   83,   84,   85, 1467, 1473,
     1474, 1468, 1475, 1477, 1478, 1479, 1480, 1481, 1482, 1483,

     1484,   83,   84,   85,   83,   84,   85, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1498,
     1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1497, 1507,
     1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,   83,
       84,   85, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
     1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,   83,
       84,   85,   83,   84,   85,   83,   84,   85, 1544, 1546,
     1548, 1549, 1550, 1551, 1552,   83,   84,   85, 1553, 1554,
     1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,

     1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
     1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
     1585, 1545, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594,   83,   84,   85, 1595, 1596, 1597, 1598, 1599, 1600,
     1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610,
     1611, 1615, 1616, 1617, 1618, 1619,   83,   84,   85, 1612,
     1620, 1621, 1613, 1622, 1623, 1614, 1624, 1625, 1626, 1627,
     1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
     1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647,
       83,   84,   85, 1648, 1649, 1651, 1652, 1653, 1654, 1655,

     1656, 1657, 1658, 1659, 1660,   83,   84,   85, 1661, 1662,
     1664, 1665, 1666, 1667, 1668, 1669, 1663, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
     1683, 1684, 1650, 1685, 1686, 1687, 1688, 1689, 1690, 1691,
     1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1702, 1703,
     1700, 1704,   83,   84,   85, 1701, 1705, 1706, 1709, 1710,
     1711, 1707, 1712,   83,   84,   85, 1708, 1713, 1714, 1715,
     1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
     1726, 1727, 1728, 1729, 1731, 1732, 1733, 1734, 1736, 1737,
     1730, 1738, 1739, 1740, 1735, 1741, 1744, 1742,   83,   84,

       85, 1745, 1746, 1747, 1748, 1749, 1751, 1752, 1753, 1754,
     1755, 1756, 1750, 1757, 1758, 1759, 1760, 1761, 1762, 1763,
     1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773,
     1774, 1775, 1776, 1777, 1778, 1743,   83,   84,   85, 1779,
     1780, 1781, 1782, 1783,   83,   84,   85, 1784, 1785, 1786,
     1787, 1789, 1790,   83,   84,   85, 1791, 1788, 1792, 1793,
     1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1803, 1804,
     1805, 1806, 1807, 1808, 1802, 1809, 1810, 1811, 1812, 1813,
     1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823,
     1824, 1826, 1827, 1828, 1829, 1830, 1831, 1825, 1832, 1833,

     1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
     1844,   83,   84,   85, 1845, 1846, 1847, 1848, 1849, 1850,
     1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
     1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868,   83,   84,
       85, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
     1878, 1879, 1880, 1881, 1148, 1882, 1883, 1884, 1885, 1886,
     1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
     1898, 1900, 1901, 1902,   83,   84,   85, 1903, 1899, 1904,
     1905, 1148, 1148, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
     1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,

     1923, 1924,   83,   84,   85, 1925, 1926, 1897, 1927, 1928,
     1929, 1930, 1931, 1932, 1934, 1935, 1936, 1937, 1933, 1938,
     1939, 1940, 1942, 1943, 1944, 1945, 1941, 1946, 1947, 1948,
     1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
     1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
     1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978,
     1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
     1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1148, 1997,
     1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
     2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,

     2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
     2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
     2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,   83,   84,
       85, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
     2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
     2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074,
     2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084,
     2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
     2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
     2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114,

     2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
     2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134,
     2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
     2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154,
     2155, 2156, 2157, 2158, 2159, 2160, 1148, 2161, 2162, 2163,
     2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173,
     2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193,
     1148, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
     2203, 2204, 2205, 2206, 2207, 2208, 2209, 1148, 1148, 2210,

     2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220,
     2221, 2222, 2223, 1148, 2224, 2225, 2226, 2227, 2228, 2229,
     2230, 2231, 2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239,
     2240, 2241, 2242, 2243, 2244,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   81, 1250,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   82,
      381, 1249,   82,  381,   82,   82,   82,   82,   82,   92,
       92,   92, 1248, 1247,  385,   92,  118,  385, 1246,  118,
     1245,  118,  118,  118,  118,  118,  126,  408, 1244,  126,
      408,  126,  126,  126,  126,  126,  193,  674, 1241,  193,
      674,  193,  193,  193,  193,  193,  198,  701, 1240,  198,
      701,  198,  198,  198,  198,  198,  202, 1239, 1238,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  213,  703,  213,  213,  703,  213,  213,
      213,  213,  213,  213,  213,  213,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
       96, 1237, 1236,   96,   96,  262, 1235, 1234,  262,  262,
      271, 1233, 1232,  271, 1231,  271,  271,  271,  271,  271,
      285, 1230, 1229,  285, 1228,  285,  285,  285,  285,  285,
      372, 1227,  372,  372,  372,  373, 1226,  373,  373,  373,
      382,  382, 1225,  382,  382,  382,  409, 1224,  409,  409,
      409,  416, 1223, 1222,  416, 1221,  416,  416,  416,  416,
      416,  422, 1220, 1219,  422, 1218,  422,  422,  422,  422,

      422,  513, 1216,  513,  513,  513,  514, 1215,  514,  514,
      514,  546, 1214,  546,  546,  546, 1213,  546,  665, 1212,
      665,  665,  665,  666, 1211,  666,  666,  666,  842, 1210,
      842,  842,  842,  843, 1209,  843,  843,  843, 1019, 1208,
     1019, 1019, 1019, 1280, 1207, 1280, 1280, 1280, 1476, 1206,
     1476, 1476, 1476, 1547, 1202, 1547, 1547, 1547, 1201, 1200,
     1199, 1198, 1197, 1196, 1195, 1193, 1192, 1184, 1183, 1182,
     1181, 1180, 1179, 1178, 1177, 1176, 1175, 1174, 1173, 1172,
     1171, 1170, 1169, 1168, 1167, 1166, 1165, 1164, 1163, 1159,
     1158, 1157, 1156, 1154, 1153, 1150, 1149, 1148, 1147, 1146,

     1145, 1144, 1143, 1142, 1141, 1140, 1139, 1137, 1136, 1135,
     1134, 1132, 1131, 1130, 1129, 1128, 1127, 1126, 1112, 1110,
     1109, 1108, 1107, 1106, 1105, 1103, 1102, 1101, 1100, 1099,
     1098, 1097, 1096, 1095, 1090, 1089, 1088, 1087, 1086, 1085,
     1084, 1083, 1082, 1081, 1080, 1079, 1078, 1077, 1076, 1075,
     1074, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 1064,
     1063, 1062, 1061, 1059, 1058, 1057, 1056, 1055, 1054, 1053,
     1052, 1051, 1050, 1049, 1048, 1045, 1044, 1043, 1042, 1041,
     1040, 1039, 1038, 1036, 1035, 1034, 1033, 1032, 1031, 1030,
     1029, 1028, 1027, 1026, 1025, 1024, 1023, 1022, 1021, 1020,

     1018, 1017, 1013, 1012, 1007, 1006, 1005, 1004, 1003, 1002,
     1001, 1000,  996,  995,  994,  993,  992,  991,  990,  989,
      986,  984,  983,  982,  981,  977,  976,  975,  974,  973,
      972,  971,  970,  969,  968,  967,  966,  965,  964,  963,
      962,  959,  958,  957,  956,  954,  953,  952,  951,  950,
      945,  940,  939,  938,  937,  931,  929,  928,  926,  925,
      924,  923,  914,  913,  912,  911,  910,  909,  908,  907,
      906,  905,  904,  903,  899,  898,  897,  896,  895,  894,
      891,  890,  889,  888,  886,  885,  422,  416,  883,  882,
      881,  880,  879,  878,  877,  876,  875,  874,  873,  870,

      869,  868,  867,  864,  863,  862,  854,  849,  844,  841,
      840,  830,  829,  828,  827,  818,  817,  816,  815,  808,
      806,  805,  804,  803,  798,  797,  796,  795,  794,  793,
      792,  791,  790,  789,  788,  787,  785,  784,  783,  782,
      774,  766,  757,  756,  755,  754,  753,  752,  746,  743,
      742,  741,  740,  731,  720,  719,  713,  712,  711,  710,
      708,  707,  285,  706,  422,  704,  416,  271,  699,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  679,  678,  677,  676,  673,  672,  671,  670,
      669,  668,  667,  198,  193,  627,  626,  623,  622,  603,

      598,  593,  576,  560,  559,  558,  285,  557,  556,  422,
      126,  553,  552,  416,  550,  271,  118,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  521,  520,
      519,  518,  517,  516,  515,  512,  198,  511,  193,   82,
      430,  429,  428,  427,  285,  421,  126,  415,  414,  271,
      412,  118,  404,  403,  400,  397,  396,  395,  394,  393,
      392,  389,  388,  387,  386,  266,  380,  379,  378,  377,
      376,  375,  374,  371,  370,  198,  197,  367,  366,  193,
      363,   82,  290,  289,  281,  280,  126,  270,  269,  118,

      258,  255,  252,  251,  228,  224,  192,  191,   82,  197,
      192,  191,   82, 2245,   13, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245

    } ;

static yyconst flex_int16_t yy_chk[4298] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,   19,   19,   19,   30,   30,   30,    4,
     1072,   23,   34,   34,   34,   23,    5,   89,    9,    9,

      258,    9,   87,    6,   23,   23,   89,   10,   10,   87,
       10,   87,  258,    3,    3,    7,    3,    3,    3,   94,
        4,    4,    3,    4,    4,    4,    8,    5,    5,    4,
        5,    5,    5,    5,    6,    6,    5,    6,    6,    6,
        6,    5,   94,    6,    9,   98,    7,    7,    6,    7,
        7,    7,    7,   10,  685,    7,   98,    8,    8,  685,
        8,    8,    8,    8,   11,   11,    8,   12,   12,   99,
       11,   99,   25,   12,   25,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   38,  102,   35,   25,   36,
       36,   36,  102,   32,   32,   25,   32,   32,   32,   32,

       44, 1074,   32,   38,   28,   35, 1075,   32,   44,  108,
       11,   44, 1076,   12,   97,  122,   25,   26,   97,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   44,
       44,   44,   28,  104,   35,   35,   35,  108,  122,   32,
       32,   32,   37,   37,  241,   37,   37,   37,   37,  334,
      104,   37,  334,   26, 1077,   26,   37,   26,   26,  231,
     1078,   26,   41,  241,   26,   26,   41,   41,   26,   41,
       26,   26,   27,   43,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   41,   41,   41,  231,  249,   43,
       43,   43,   27,   27,   27,  256,  383,   27,   42,  458,

       27,   27,   42,   27,   39,  249,   39,  261,   42,   39,
      256,   27,   27,   27,  458, 1079,   39,  383,   39,   27,
       39,  261,  330,   42,   42,   42,   27,   27,   68,   68,
       68,   27,   39,   39,   39, 1080,  330,   27,   27,   27,
       33,   33,   45,   33,   33,   33,   33,   33,   40,   33,
       46,   40,   45,  523,   33,   72,   72,   72,  106,  106,
       40,   40,   40,   47,  106,   46,   46,   45,   45,   45,
       33,   46,  577,   46,  577,   46,  523,   48,   47,   47,
       47,   49,  434,   48,   50,  434,   33,   33,   33,   46,
       46,   46,   48,   48,   48,   52,   50,   50,   50,   49,

       55,  478,   54,   49,  478,   55,   82,   82,   82,   52,
      680,   52,   54,   49,  680,  475,   55,   55,   55,   49,
       52,   52,   52,  475,   54,   54,   54,  409,   49,   49,
       49,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51, 1081,  491,   53,   53,  491,  672,   57,  110,  110,
      110,  409,   53,  672,  672,   56,   53,   53,   96,   96,
       96,   53,   57,   57,   57,   51,   53,   53,   53,   56,
       76,  459,   56,   76,   56,   56, 1082,   96,   96,   96,
       80,  492,   51,   80,  492,   51,  459, 1084,  107,  107,
      107,  112,  112,  112,   51,   51,   51,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,  107,  107,  107,
      113,  113,  113,   76,  118,  126,   76,  114,  114,  114,
       76,  861,  315,   80,  315, 1085,   80,  126,   76,  315,
       80,  315,   76,  510,   76,   76,  510,  410,   80,  115,
      115,  115,   80, 1086,   80,   80,   91,  861,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,  123,  123,
      123,  410,  675,  118,  118,  118,   91,   91,   91,  659,
      137,   91,  659, 1087,   91,   91,  125,   91, 1088,  126,
      126,  126,  714,  675,  130,   91,   91,   91,  132,  132,
      132,  136,  714,   91,  546,  125,  137,  137,  137, 1089,

       91,   91,  136,  136,  136,   91,   92,  130,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  546,  125,
      125,  125,  139,  130,  130,  130,   92,   92,   92,  138,
      140,   92,  139,  150,   92,   92,  142,  870, 1090,  140,
      140,  140,  150,  150,  150,   92,   92,   92,  139,  139,
      139,  145,  870,   92,  138,  138,  138,  142,  142,  142,
       92,   92,  109,  109,  109,  109,  109,  109,  109,  109,
      124,  124, 1095,  124,  124,  124,  124,  722, 1096,  124,
      145,  145,  145, 1098,  124,  109, 1099,  722,  109,  109,
     1101,  109,  131,  131,  147,  131,  131,  131,  131,  133,

      133,  131,  133,  133,  133,  133,  131,  109,  133, 1102,
      147,  147,  147,  133,  109,  109,  143,  144,  148,  109,
      111,  141, 1103,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  141,  141,  141,  146,  143,  143,  143,
     1104,  152,  144,  144,  144,  148,  148,  148,  149,  155,
      146,  146,  146,  151,  154,  157,  149,  149,  149,  152,
      152,  152,  151,  151,  151,  155,  155,  155,  156,  154,
      154,  154,  276,  276,  276, 1105,  153,  171,  156,  156,
      156, 1106,  578,  153,  578,  153,  111,  111,  111,  116,
      158,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  153,  153,  153,  171,  171,  171,  116,  116,  116,
      116,  116,  169,  159, 1107,  158,  158,  158,  160, 1108,
     1109,  157,  157,  157,  162,  116,  116,  116,  116,  116,
      116,  159,  159,  159,  167,  161,  165,  160, 1110,  163,
      162,  162,  162,  160,  161,  161,  161,  163,  164, 1112,
      160,  160,  168,  160,  758,  163,  163,  163,  166,  165,
     1115,  160,  160,  160,  758,  165,  164,  164,  164,  173,
      168,  168,  168,  188,  166,  165,  165,  165,  169,  169,
      169,  166,  166,  166,  976,  769,  167,  170,  172, 1116,
      167,  188,  188,  188,  172,  769,  174,  173,  173,  173,

      167,  167,  167,  174,  170,  176,  177,  170,  175,  172,
      172,  172,  180,  174,  174,  174,  179,  175,  175,  175,
      178,  176,  176,  176, 1117,  810,  178,  976, 1063,  180,
      181,  177,  177,  177,  292,  810,  179,  183,  178,  178,
      178,  180,  180,  180,  181,  179,  179,  179,  182,  183,
      183,  183,  184,  182, 1118, 1119,  187, 1120,  181,  181,
      181,  189,  186,  820,  182,  182,  182,  185,  187,  187,
      187, 1063,  184,  820, 1122,  190,  185,  185,  185, 1037,
     1123,  184,  184,  184,  186,  186,  186,  190,  190,  190,
      189,  189,  189,  193, 1071, 1125,  198,  284,  284,  284,

      292,  292,  292, 1124, 1124,  193,  234, 1037,  198,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  243,
     1126,  300,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  262,  262,  262,  263, 1127, 1071,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  300,  300,
      300,  262,  262,  262, 1128, 1129,  265,  193,  193,  193,
      198,  198,  198,  232,  271,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232, 1130,  271,  265,  277,  265,
      267,  736, 1131,  232,  232,  232,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  265,  736,  265,  277,

      278,  736,  232,  232,  232,  267, 1133,  267,  267,  267,
      275,  275,  278,  275,  275,  275,  275,  294,  306,  275,
      277,  277,  277, 1134,  275,  673,  285,  267,  271,  271,
      271,  267,  673,  673,  267,  267,  279,  279,  285,  279,
      279,  279,  279, 1097, 1135,  279,  306,  306,  306,  282,
      279,  282, 1136,  283,  283, 1137,  283,  283,  283,  283,
      295,  291,  283,  305,  278,  278,  278,  283,  282,  293,
      282,  291,  291,  291,  297,  295,  295,  295,  302,  293,
      293,  293,  298,  294,  294,  294, 1097,  296, 1139,  301,
      285,  285,  285,  299,  282,  282,  282,  296,  296,  296,

      301,  301,  301,  297,  297,  297,  303, 1140,  298,  298,
      298,  299,  299,  299,  304, 1142, 1143,  303,  303,  303,
      307,  302,  309,  320, 1144,  313,  302,  311, 1146,  305,
      305,  305,  304,  304,  304,  310,  308,  307,  307,  307,
      309,  309,  309,  312,  302,  302,  302,  308,  308,  308,
      313,  313,  313,  310,  310,  310,  311,  311,  311,  316,
      314,  317,  318,  326,  320,  331,  331,  331,  319,  316,
      316,  316,  312,  312,  312,  314,  314,  314,  319,  319,
      319,  321,  322,  318,  318,  318,  317,  317,  317,  320,
      320,  320,  322,  322,  322,  323,  321,  321,  321,  325,

      324,  328, 1147, 1151,  329,  336, 1152,  332, 1011, 1011,
      339,  327, 1011,  336,  336,  336, 1153,  333,  323,  323,
      323,  324,  324,  324,  325,  325,  325,  335,  337,  326,
      326,  326,  327,  327,  327,  333,  333,  333,  337,  337,
      337,  338,  340,  344, 1011,  342,  335,  335,  335,  345,
      346,  340,  340,  340,  341,  342,  342,  342,  350,  338,
      338,  338,  346,  346,  346, 1154, 1156,  328,  328,  328,
      329,  329,  329,  332,  332,  332,  339,  339,  339,  343,
      349,  351,  341,  341,  341,  347, 1157,  356,  348,  343,
      343,  343, 1159,  362, 1160,  347,  347,  347,  348,  348,

      348,  349,  349,  349,  352, 1161,  351,  351,  351,  344,
      344,  344,  356,  356,  356,  345,  345,  345,  353,  354,
     1162,  352,  355, 1141,  350,  350,  350,  359,  353,  353,
      353,  352,  352,  352,  354,  354,  354,  357,  355,  355,
      355,  358,  360,  381, 1163,  381,  361, 1164,  357,  357,
      357,  364, 1165,  358,  358,  358,  359,  359,  359,  362,
      362,  362,  381,  364,  381,  368, 1141,  382,  449,  449,
      449,  360,  360,  360,  361,  361,  361,  368,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  385,  408,
      385,  408,  382, 1166,  382,  382,  382,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  385,  408,  385,
      408,  413,  433,  431,  382,  364,  364,  364,  382,  436,
     1167,  382,  382,  413,  420,  431,  431,  431, 1168,  368,
      368,  368,  411,  416, 1169,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  416,  422,  420,  432,  426,
      432,  443, 1171,  432,  444, 1173,  432,  435,  422,  438,
     1174,  426,  439,  420,  420,  420,  437,  435,  435,  435,
     1175,  437,  437,  437,  440,  413,  413,  413,  433,  433,
      433, 1176,  438,  438,  438,  436,  436,  436,  439,  439,
      439,  441,  452,  440,  440,  440,  445,  416,  416,  416,

      446,  450,  441,  441,  441,  448,  445,  445,  445,  456,
      422,  422,  422,  426,  426,  426,  451,  443,  443,  443,
      444,  444,  444,  448,  448,  448,  450,  450,  450,  446,
      446,  446,  447,  452,  447,  453,  454,  447,  455,  461,
      447,  462,  451,  451,  451,  463,  454,  454,  454,  464,
      455,  455,  455,  453,  453,  453,  466,  468,  452,  452,
      452,  463,  463,  463,  462,  462,  462,  467,  466,  466,
      466,  469,  470,  456,  456,  456, 1177, 1178,  464,  464,
      464, 1179,  470,  470,  470,  488,  467,  467,  467,  471,
      472,  471,  472,  473, 1180,  472, 1181,  483,  472,  485,

      490,  473,  473,  473,  482,  461,  461,  461,  474,  484,
      474,  494, 1182,  474, 1183, 1184,  474,  479,  479,  479,
      485,  485,  485,  468,  468,  468,  483,  483,  483,  482,
      482,  482, 1188, 1188,  484,  484,  484,  469,  469,  469,
      486,  489,  486, 1191, 1192,  486,  487,  499,  486, 1193,
     1195,  488,  488,  488,  496,  471,  471,  471,  487,  487,
      487,  493,  489,  489,  489,  495,  490,  490,  490,  499,
      499,  499,  493,  493,  493,  506,  500,  494,  494,  494,
      501,  496,  496,  496, 1197, 1198,  495,  495,  495,  497,
      498,  497,  505,  571,  497, 1199, 1158,  497,  500,  500,

      500,  502,  498,  498,  498,  501,  501,  501,  502,  502,
      502,  503,  504,  504,  504,  507,  509,  505,  505,  505,
      508, 1200,  503,  503,  503, 1201, 1202,  507,  507,  507,
      508,  508,  508, 1025,  509,  509,  509, 1025,  572, 1158,
     1025,  506,  506,  506,  522, 1170, 1203,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  528,  551,  571,
      571,  571,  528,  572,  572,  572, 1204, 1205,  528,  528,
      551, 1206,  528,  545, 1207,  528,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  547, 1208, 1170,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  548,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  549,
      554,  561,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  551,  551,  551,  555,  566,  566,  569,  574,
      549,  554,  549,  573,  573,  573,  575,  555,  585,  566,
      561,  561,  561,  566,  579, 1172,  579,  566,  580,  549,
      600,  549,  554,  554,  554,  570,  570,  569,  569,  569,
      580,  580,  580,  585,  585,  585,  586,  590,  570,  589,
      589,  589,  570,  588, 1209,  592,  570,  592, 1210,  600,
      600,  600, 1211, 1212,  591,  652,  652,  652, 1172,  555,
      555,  555,  601, 1196, 1213,  574,  574,  574,  579,  588,

      588,  588,  575,  575,  575,  591,  591,  591,  599,  599,
      579,  579,  579,  609,  586,  586,  586,  601,  601,  601,
      604,  599,  605,  609,  602,  599,  609,  610,  615,  599,
     1214,  609, 1215,  590,  590,  590, 1196,  592,  592,  592,
      602,  602,  602,  608,  604,  604,  604,  605,  605,  605,
      606,  606,  628,  615,  615,  615,  630, 1216,  608,  608,
      608,  985,  629,  606, 1218,  610,  631,  606,  985,  985,
      636,  606,  629,  629,  629, 1219,  644, 1221,  628,  628,
      628,  638,  744,  630,  630,  630,  636,  636,  636,  610,
      610,  610,  646,  631,  631,  631,  639,  639,  638,  638,

      638,  644,  644,  644,  647,  645,  645,  654, 1222,  639,
      655,  653,  658,  639,  647,  647,  647,  639,  645,  646,
      646,  646,  645,  653,  653,  653,  645,  655,  655,  655,
      657,  660,  654,  654,  654,  656,  656,  656,  658,  658,
      658,  661,  662,  728,  728,  728, 1223, 1224,  744,  744,
      744,  657,  657,  657,  660,  660,  660, 1225,  668,  747,
      668, 1226,  661,  661,  661,  668,  668,  662,  662,  662,
      670,  674,  670,  674,  701, 1227,  701,  670,  670,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  703,
      674,  703,  674,  701,  705,  701,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  702,  709,  721,  703,  737,
      703,  739,  737,  738,  749,  764,  767,  721,  721,  721,
      705,  750,  738,  738,  738,  747,  747,  747,  751,  780,
      705,  705,  705,  709,  709,  709,  739,  739,  739,  763,
      768,  749,  749,  749,  799,  767,  767,  767,  775,  737,
      786,  786,  786,  807, 1228,  781, 1229,  763,  763,  763,
      775,  775,  775,  764,  764,  764,  765,  781,  781,  781,
      819,  737,  737,  737,  800,  802,  802,  802,  750,  750,
      750,  834, 1231,  765, 1232, 1234,  780,  780,  780,  751,
      751,  751,  801,  765,  765,  765,  918,  809, 1235,  800,

      800,  800,  801,  801,  801,  833,  768,  768,  768,  838,
      799,  799,  799,  825,  825,  825,  826,  826,  826,  807,
      807,  807,  809,  809,  809,  831,  839,  838,  838,  838,
      833,  833,  833,  832,  884, 1236,  819,  819,  819,  837,
      831,  831,  831,  832,  832,  832,  887,  834,  834,  834,
      837,  837,  837,  918,  918,  918,  887,  887,  887,  900,
      932, 1237,  884,  919,  919,  919,  920,  884,  884,  884,
      921,  933,  933,  933,  839,  839,  839,  922,  941,  944,
      900,  900,  900,  934,  934,  934,  943,  920,  920,  920,
      946,  955,  960,  960,  960, 1238, 1239,  921,  921,  921,

      944,  944,  944,  922,  922,  922,  945,  945,  945, 1240,
      945,  943,  943,  943, 1241,  947,  945,  946,  946,  946,
      947,  961,  980,  945, 1242, 1243,  932,  932,  932, 1244,
      947, 1094, 1009,  947, 1008, 1245,  961,  961,  961,  979,
      979,  979, 1015, 1248,  941,  941,  941,  980,  980,  980,
     1008, 1008, 1008, 1009, 1009, 1009, 1010,  955,  955,  955,
     1014, 1014, 1014, 1060, 1060, 1060, 1073, 1015, 1015, 1015,
     1092, 1113, 1010, 1010, 1010, 1091, 1091, 1091, 1093, 1121,
     1249, 1073, 1073, 1073, 1114, 1251, 1190, 1252, 1093, 1093,
     1093, 1253, 1190, 1092, 1092, 1092, 1255, 1094, 1094, 1094,

     1111, 1138, 1155, 1111, 1121, 1121, 1121, 1132, 1258, 1132,
     1111, 1185, 1132, 1114, 1114, 1114, 1186, 1190, 1138, 1138,
     1138, 1149, 1259, 1261, 1149, 1194, 1194, 1194, 1155, 1155,
     1155, 1149, 1185, 1185, 1185, 1262, 1187, 1113, 1113, 1113,
     1217, 1263, 1217, 1186, 1186, 1186, 1187, 1187, 1187, 1189,
     1189, 1189, 1189, 1254, 1264, 1265, 1266, 1267, 1268, 1217,
     1269, 1217, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1254,
     1254, 1254, 1277, 1278, 1279, 1281, 1282, 1284, 1285, 1272,
     1272, 1272, 1288, 1283, 1289, 1271, 1271, 1271, 1283, 1291,
     1292, 1283, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301,

     1302, 1303, 1303, 1303, 1296, 1296, 1296, 1304, 1305, 1306,
     1307, 1308, 1309, 1312, 1313, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1318, 1328,
     1329, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1340, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
     1349, 1350, 1353, 1354, 1356, 1357, 1358, 1359, 1360, 1361,
     1362, 1363, 1366, 1367, 1369, 1370, 1371, 1372, 1373, 1374,
     1374, 1374, 1373, 1373, 1373, 1375, 1375, 1375, 1386, 1387,
     1389, 1390, 1391, 1392, 1393, 1323, 1323, 1323, 1394, 1395,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,

     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1417,
     1418, 1420, 1421, 1422, 1423, 1425, 1426, 1427, 1428, 1429,
     1430, 1386, 1431, 1432, 1433, 1434, 1435, 1436, 1438, 1439,
     1440, 1441, 1441, 1441, 1442, 1443, 1445, 1447, 1448, 1450,
     1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
     1462, 1464, 1465, 1466, 1467, 1468, 1456, 1456, 1456, 1463,
     1469, 1470, 1463, 1471, 1473, 1463, 1474, 1475, 1477, 1478,
     1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1491, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1478, 1478, 1478, 1500, 1501, 1502, 1503, 1504, 1505, 1506,

     1507, 1509, 1510, 1511, 1512, 1455, 1455, 1455, 1513, 1514,
     1515, 1516, 1517, 1518, 1519, 1520, 1514, 1521, 1522, 1523,
     1524, 1525, 1526, 1527, 1529, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1501, 1537, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1548, 1549, 1550, 1551, 1552, 1554, 1556, 1557,
     1555, 1558, 1502, 1502, 1502, 1555, 1559, 1561, 1563, 1564,
     1565, 1562, 1566, 1543, 1543, 1543, 1562, 1567, 1568, 1569,
     1572, 1573, 1575, 1576, 1577, 1579, 1580, 1581, 1582, 1584,
     1585, 1586, 1587, 1588, 1589, 1590, 1592, 1593, 1594, 1595,
     1588, 1597, 1598, 1602, 1593, 1603, 1604, 1603, 1605, 1605,

     1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
     1615, 1616, 1610, 1617, 1618, 1619, 1620, 1621, 1623, 1624,
     1625, 1627, 1630, 1631, 1633, 1634, 1635, 1636, 1637, 1638,
     1639, 1641, 1642, 1644, 1645, 1603, 1627, 1627, 1627, 1646,
     1647, 1648, 1649, 1650, 1651, 1651, 1651, 1652, 1653, 1654,
     1655, 1656, 1657, 1604, 1604, 1604, 1658, 1655, 1659, 1660,
     1661, 1662, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671,
     1674, 1675, 1677, 1678, 1669, 1679, 1680, 1681, 1682, 1683,
     1684, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
     1695, 1696, 1697, 1698, 1699, 1700, 1701, 1695, 1702, 1703,

     1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713,
     1714, 1690, 1690, 1690, 1715, 1716, 1717, 1718, 1719, 1720,
     1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1731,
     1733, 1734, 1736, 1739, 1740, 1741, 1742, 1743, 1744, 1744,
     1744, 1745, 1746, 1747, 1748, 1749, 1751, 1752, 1753, 1754,
     1755, 1756, 1757, 1759, 1760, 1762, 1763, 1764, 1765, 1766,
     1769, 1770, 1771, 1772, 1773, 1775, 1776, 1777, 1779, 1780,
     1781, 1783, 1784, 1785, 1765, 1765, 1765, 1786, 1781, 1787,
     1789, 1791, 1792, 1793, 1796, 1797, 1798, 1799, 1800, 1801,
     1803, 1804, 1805, 1807, 1809, 1810, 1812, 1813, 1815, 1816,

     1817, 1818, 1819, 1819, 1819, 1820, 1821, 1780, 1822, 1823,
     1824, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1828, 1833,
     1834, 1835, 1836, 1837, 1838, 1839, 1835, 1840, 1841, 1842,
     1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852,
     1853, 1854, 1855, 1856, 1857, 1860, 1863, 1864, 1865, 1868,
     1869, 1870, 1871, 1874, 1875, 1877, 1878, 1879, 1880, 1882,
     1883, 1884, 1885, 1887, 1888, 1889, 1890, 1891, 1892, 1895,
     1896, 1897, 1898, 1899, 1900, 1901, 1902, 1905, 1906, 1909,
     1910, 1913, 1917, 1919, 1921, 1922, 1924, 1925, 1927, 1930,
     1931, 1932, 1933, 1935, 1936, 1937, 1938, 1939, 1940, 1941,

     1943, 1944, 1945, 1946, 1948, 1949, 1951, 1952, 1953, 1954,
     1955, 1956, 1961, 1962, 1963, 1966, 1967, 1968, 1969, 1970,
     1971, 1973, 1975, 1976, 1977, 1978, 1979, 1980, 1885, 1885,
     1885, 1981, 1982, 1983, 1984, 1985, 1986, 1990, 1991, 1992,
     1993, 1994, 1995, 1997, 1998, 2002, 2003, 2006, 2008, 2009,
     2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
     2020, 2021, 2022, 2023, 2024, 2027, 2028, 2029, 2030, 2031,
     2033, 2034, 2035, 2036, 2037, 2041, 2043, 2044, 2045, 2046,
     2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
     2058, 2060, 2063, 2064, 2065, 2067, 2068, 2069, 2070, 2071,

     2072, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082,
     2083, 2085, 2086, 2087, 2088, 2090, 2091, 2092, 2093, 2094,
     2095, 2096, 2097, 2098, 2099, 2100, 2101, 2107, 2108, 2109,
     2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
     2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2129, 2130,
     2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
     2141, 2142, 2144, 2145, 2146, 2147, 2148, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2160, 2162, 2163, 2164, 2165, 2166,
     2167, 2168, 2169, 2170, 2172, 2175, 2176, 2178, 2179, 2180,
     2181, 2183, 2184, 2186, 2188, 2189, 2190, 2191, 2192, 2193,

     2195, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2205, 2206,
     2207, 2208, 2209, 2210, 2211, 2215, 2216, 2217, 2221, 2223,
     2224, 2225, 2226, 2227, 2228, 2231, 2232, 2233, 2234, 2235,
     2236, 2237, 2238, 2241, 2243, 2246, 2246, 2246, 2246, 2246,
     2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2246, 2247,
     2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247, 2247,
     2247, 2247, 2247, 2248, 2248, 2248, 2248, 2248, 2248, 2248,
     2248, 2248, 2248, 2248, 2248, 2248, 2248, 2249, 2249, 2249,
     2249, 2249, 2249, 2249, 2249, 2249, 2249, 2249, 2249, 2249,
     2249, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250, 2250,

     2250, 2250, 2250, 2250, 2250, 2251, 1070, 2251, 2251, 2251,
     2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2251, 2252,
     2274, 1069, 2252, 2274, 2252, 2252, 2252, 2252, 2252, 2253,
     2253, 2253, 1068, 1067, 2275, 2253, 2254, 2275, 1066, 2254,
     1065, 2254, 2254, 2254, 2254, 2254, 2255, 2276, 1064, 2255,
     2276, 2255, 2255, 2255, 2255, 2255, 2256, 2282, 1062, 2256,
     2282, 2256, 2256, 2256, 2256, 2256, 2257, 2283, 1061, 2257,
     2283, 2257, 2257, 2257, 2257, 2257, 2258, 1059, 1058, 2258,
     2258, 2258, 2258, 2258, 2258, 2258, 2258, 2258, 2258, 2259,
     2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259, 2259,

     2259, 2259, 2259, 2260, 2284, 2260, 2260, 2284, 2260, 2260,
     2260, 2260, 2260, 2260, 2260, 2260, 2261, 2261, 2261, 2261,
     2261, 2261, 2261, 2261, 2261, 2261, 2261, 2261, 2261, 2261,
     2262, 1057, 1056, 2262, 2262, 2263, 1055, 1054, 2263, 2263,
     2264, 1053, 1052, 2264, 1051, 2264, 2264, 2264, 2264, 2264,
     2265, 1050, 1049, 2265, 1048, 2265, 2265, 2265, 2265, 2265,
     2266, 1047, 2266, 2266, 2266, 2267, 1046, 2267, 2267, 2267,
     2268, 2268, 1045, 2268, 2268, 2268, 2269, 1044, 2269, 2269,
     2269, 2270, 1043, 1042, 2270, 1041, 2270, 2270, 2270, 2270,
     2270, 2271, 1040, 1039, 2271, 1038, 2271, 2271, 2271, 2271,

     2271, 2272, 1036, 2272, 2272, 2272, 2273, 1035, 2273, 2273,
     2273, 2277, 1034, 2277, 2277, 2277, 1033, 2277, 2278, 1032,
     2278, 2278, 2278, 2279, 1031, 2279, 2279, 2279, 2280, 1030,
     2280, 2280, 2280, 2281, 1029, 2281, 2281, 2281, 2285, 1028,
     2285, 2285, 2285, 2286, 1027, 2286, 2286, 2286, 2287, 1026,
     2287, 2287, 2287, 2288, 1024, 2288, 2288, 2288, 1023, 1022,
     1021, 1020, 1018, 1017, 1016, 1013, 1012, 1007, 1006, 1005,
     1004, 1003, 1002, 1001, 1000,  999,  998,  997,  996,  995,
      994,  993,  992,  991,  990,  989,  988,  987,  986,  984,
      983,  982,  981,  978,  977,  975,  973,  972,  971,  970,

      969,  967,  966,  965,  964,  963,  962,  959,  958,  957,
      956,  954,  953,  952,  951,  950,  949,  948,  942,  940,
      939,  938,  937,  936,  935,  931,  930,  929,  928,  927,
      926,  925,  924,  923,  917,  916,  915,  914,  913,  912,
      911,  910,  909,  908,  907,  906,  905,  904,  903,  902,
      901,  899,  898,  897,  896,  895,  894,  893,  892,  891,
      890,  889,  888,  886,  885,  883,  882,  880,  879,  878,
      877,  874,  873,  872,  871,  869,  868,  867,  866,  865,
      864,  863,  862,  860,  859,  858,  857,  856,  855,  854,
      853,  852,  851,  850,  849,  848,  847,  846,  845,  844,

      841,  840,  836,  835,  830,  829,  828,  827,  824,  823,
      822,  821,  818,  817,  816,  815,  814,  813,  812,  811,
      808,  806,  805,  804,  803,  798,  797,  796,  795,  794,
      793,  792,  791,  790,  789,  788,  787,  785,  784,  783,
      782,  779,  778,  777,  776,  774,  773,  772,  771,  770,
      766,  762,  761,  760,  759,  748,  746,  745,  743,  742,
      741,  740,  735,  734,  733,  732,  731,  730,  729,  727,
      726,  725,  724,  723,  720,  719,  718,  717,  716,  715,
      713,  712,  711,  710,  708,  707,  706,  704,  698,  697,
      696,  695,  694,  693,  691,  690,  689,  688,  686,  684,

      683,  682,  681,  678,  677,  676,  671,  669,  667,  664,
      663,  651,  650,  649,  648,  643,  642,  641,  640,  637,
      635,  634,  633,  632,  627,  626,  625,  624,  623,  622,
      621,  620,  619,  618,  617,  616,  614,  613,  612,  611,
      607,  603,  598,  597,  596,  595,  594,  593,  587,  584,
      583,  582,  581,  576,  568,  567,  565,  564,  563,  562,
      560,  559,  558,  557,  556,  553,  552,  550,  544,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  534,  532,
      531,  530,  527,  526,  525,  524,  521,  520,  519,  518,
      517,  516,  515,  512,  511,  481,  480,  477,  476,  465,

      460,  457,  442,  430,  429,  428,  427,  425,  424,  423,
      421,  419,  418,  417,  415,  414,  412,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  380,  379,
      378,  377,  376,  375,  374,  371,  370,  367,  366,  363,
      290,  289,  288,  287,  286,  281,  280,  274,  273,  272,
      270,  269,  260,  259,  257,  255,  254,  253,  252,  251,
      250,  248,  247,  246,  245,  239,  230,  229,  228,  227,
      226,  225,  224,  201,  200,  199,  197,  196,  195,  194,
      192,  191,  135,  134,  129,  128,  127,  121,  120,  119,

      105,  103,  101,  100,   88,   86,   85,   84,   83,   69,
       62,   61,   60,   13, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245, 2245,
     2245, 2245, 2245, 2245, 2245, 2245, 2245

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SmaliLexer.ll"
#line 2 "SmaliLexer.ll"
//===- SmaliLexer.ll - ART-LEX --------------------------------*- flex -*-===//
//
//                     ANDROID REVERSE TOOLKIT
//
// This file is distributed under the GNU GENERAL PUBLIC LICENSE
// V3 License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// The file defines a lexer for smali language. Please use
// flex -o SmaliLexer.cpp SmaliLexer.ll
// to generate lex source file
// or
// flex -s -o SmaliLexer.cpp SmaliLexer.ll
// to debug
// some defination is copied from Apktool
// see https://github.com/iBotPeaches/Apktool
//
//===----------------------------------------------------------------------===//
	#include <iostream>
	#include <cstdlib>
    #include "SmaliLexer.h"
	#include "SmaliParser.hpp"
	#include "location.hh"
    #include "utils/Defs.h"

	using namespace std;
	using namespace Analysis;


	#define MATCHT acceptToken(yytext, yyleng)
    #define LOCATION Analysis::location(YY_NULL, line(), column())
    #define yyterminate() SmaliParser::make_END(LOCATION);
    #define makeToken(x) SmaliParser::make_##x(LOCATION)
    #define makeTokenStr(x) SmaliParser::make_##x(std::string(yytext, yyleng), LOCATION)
    #define makeTokenI(x, y) SmaliParser::make_##x(y, LOCATION)
/*This can either be a floating point number or an identifier*/
/*This can only be a float and not an identifier, due to the decimal point*/

#line 2137 "SmaliLexer.cpp"

#define INITIAL 0
#define PARAM_LIST_OR_ID 1
#define PARAM_LIST 2
#define ARRAY_DESCRIPTOR 3
#define STRING 4
#define CHAR 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 103 "SmaliLexer.ll"

    /*Symbols/Whitespace/EOF*/

#line 2278 "SmaliLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2246 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4215 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 106 "SmaliLexer.ll"
{ MATCHT; return makeToken(DOTDOT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 107 "SmaliLexer.ll"
{ MATCHT; return makeToken(ARROW); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 108 "SmaliLexer.ll"
{ MATCHT; return makeToken(EQUAL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 109 "SmaliLexer.ll"
{ MATCHT; return makeToken(COLON); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 110 "SmaliLexer.ll"
{ MATCHT; return makeToken(COMMA); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 111 "SmaliLexer.ll"
{ MATCHT; return makeToken(OPEN_BRACE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 112 "SmaliLexer.ll"
{ MATCHT; return makeToken(CLOSE_BRACE); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 113 "SmaliLexer.ll"
{ MATCHT; return makeToken(OPEN_PAREN); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 114 "SmaliLexer.ll"
{ MATCHT; return makeToken(CLOSE_PAREN); }
	YY_BREAK
/*Directives*/
case 10:
YY_RULE_SETUP
#line 118 "SmaliLexer.ll"
{ MATCHT; return makeToken(CLASS_DIRECTIVE); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 119 "SmaliLexer.ll"
{ MATCHT; return makeToken(SUPER_DIRECTIVE); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 120 "SmaliLexer.ll"
{ MATCHT; return makeToken(IMPLEMENTS_DIRECTIVE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 121 "SmaliLexer.ll"
{ MATCHT; return makeToken(SOURCE_DIRECTIVE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "SmaliLexer.ll"
{ MATCHT; return makeToken(FIELD_DIRECTIVE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 123 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_FIELD_DIRECTIVE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 124 "SmaliLexer.ll"
{ MATCHT; return makeToken(SUBANNOTATION_DIRECTIVE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 125 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_SUBANNOTATION_DIRECTIVE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 126 "SmaliLexer.ll"
{ MATCHT; return makeToken(ANNOTATION_DIRECTIVE); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 127 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_ANNOTATION_DIRECTIVE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 128 "SmaliLexer.ll"
{ MATCHT; return makeToken(ENUM_DIRECTIVE); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 129 "SmaliLexer.ll"
{ MATCHT; return makeToken(METHOD_DIRECTIVE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 130 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_METHOD_DIRECTIVE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 131 "SmaliLexer.ll"
{ MATCHT; return makeToken(REGISTERS_DIRECTIVE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 132 "SmaliLexer.ll"
{ MATCHT; return makeToken(LOCALS_DIRECTIVE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 133 "SmaliLexer.ll"
{ MATCHT; return makeToken(ARRAY_DATA_DIRECTIVE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 134 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_ARRAY_DATA_DIRECTIVE); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 135 "SmaliLexer.ll"
{ MATCHT; return makeToken(PACKED_SWITCH_DIRECTIVE); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 136 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_PACKED_SWITCH_DIRECTIVE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 137 "SmaliLexer.ll"
{ MATCHT; return makeToken(SPARSE_SWITCH_DIRECTIVE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 138 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_SPARSE_SWITCH_DIRECTIVE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 139 "SmaliLexer.ll"
{ MATCHT; return makeToken(CATCH_DIRECTIVE); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 140 "SmaliLexer.ll"
{ MATCHT; return makeToken(CATCHALL_DIRECTIVE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 141 "SmaliLexer.ll"
{ MATCHT; return makeToken(LINE_DIRECTIVE); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 142 "SmaliLexer.ll"
{ MATCHT; return makeToken(PARAMETER_DIRECTIVE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 143 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_PARAMETER_DIRECTIVE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 144 "SmaliLexer.ll"
{ MATCHT; return makeToken(LOCAL_DIRECTIVE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 145 "SmaliLexer.ll"
{ MATCHT; return makeToken(END_LOCAL_DIRECTIVE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 146 "SmaliLexer.ll"
{ MATCHT; return makeToken(RESTART_LOCAL_DIRECTIVE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 147 "SmaliLexer.ll"
{ MATCHT; return makeToken(PROLOGUE_DIRECTIVE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 148 "SmaliLexer.ll"
{ MATCHT; return makeToken(EPILOGUE_DIRECTIVE); }
	YY_BREAK
/*Literals*/
case 41:
YY_RULE_SETUP
#line 151 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(POSITIVE_INTEGER_LITERAL); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 152 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(NEGATIVE_INTEGER_LITERAL); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 153 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(LONG_LITERAL); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 154 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(SHORT_LITERAL); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(BYTE_LITERAL); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 157 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(FLOAT_LITERAL_OR_ID); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 158 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(DOUBLE_LITERAL_OR_ID); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 159 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(FLOAT_LITERAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(DOUBLE_LITERAL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 162 "SmaliLexer.ll"
{
     MATCHT;
     if (yytext[0] == 'y')
         return makeTokenI(BOOL_LITERAL, 1);
     else
         return makeTokenI(BOOL_LITERAL, 0); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 169 "SmaliLexer.ll"
{ MATCHT; return makeToken(NULL_LITERAL); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "SmaliLexer.ll"
{ beginStringOrChar(STRING); sb.push_back('"'); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 173 "SmaliLexer.ll"
{ beginStringOrChar(CHAR); sb.push_back('\''); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 176 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(PARAM_LIST_OR_ID_PRIMITIVE_TYPE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 177 "SmaliLexer.ll"
{ yyless(0); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(PARAM_LIST_OR_ID):
#line 178 "SmaliLexer.ll"
{ BEGIN(INITIAL); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 180 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(PRIMITIVE_TYPE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 181 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(CLASS_DESCRIPTOR); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 182 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(ARRAY_TYPE_PREFIX); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 183 "SmaliLexer.ll"
{ yyless(0); BEGIN(INITIAL);}
	YY_BREAK
case YY_STATE_EOF(PARAM_LIST):
#line 184 "SmaliLexer.ll"
{ BEGIN(INITIAL);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 187 "SmaliLexer.ll"
{
        sb.push_back('"');
        acceptToken(sb.c_str(), sb.length());
        return endStringOrChar(SmaliParser::token::TOKEN_STRING_LITERAL); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "SmaliLexer.ll"
{ sb.append(yytext, yyleng); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "SmaliLexer.ll"
{ sb.push_back('\b'); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "SmaliLexer.ll"
{ sb.push_back('\t'); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 195 "SmaliLexer.ll"
{ sb.push_back('\n'); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "SmaliLexer.ll"
{ sb.push_back('\f'); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "SmaliLexer.ll"
{ sb.push_back('\r'); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "SmaliLexer.ll"
{ sb.push_back('\''); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "SmaliLexer.ll"
{ sb.push_back('"'); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "SmaliLexer.ll"
{ sb.push_back('\\'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "SmaliLexer.ll"
{
        auto i = strtol(yytext+2, 0, 16);
        sb.append((char*)&i, 2);
    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 206 "SmaliLexer.ll"
{
        sb.append(yytext, yyleng);
    }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 210 "SmaliLexer.ll"
{
        sb.append(yytext, yyleng);
    }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 214 "SmaliLexer.ll"
{
                BEGIN(INITIAL);
                acceptToken(sb.c_str(), sb.length());
                return SmaliParser::make_ERROR(sb, LOCATION); }
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 218 "SmaliLexer.ll"
{
             BEGIN(INITIAL);
             acceptToken(sb.c_str(), sb.length());
             return SmaliParser::make_ERROR(sb, LOCATION); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 225 "SmaliLexer.ll"
{
        sb.push_back('\'');
        if (sb.length() != 3 ) {
            acceptToken(sb.c_str(), sb.length());
            return SmaliParser::make_ERROR(sb, LOCATION);
        }
        acceptToken(sb.c_str(), sb.length());
        return endStringOrChar(SmaliParser::token::TOKEN_CHAR_LITERAL);
    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 235 "SmaliLexer.ll"
{ sb.append(yytext, yyleng); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 236 "SmaliLexer.ll"
{ sb.push_back('\b'); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 237 "SmaliLexer.ll"
{ sb.push_back('\t'); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 238 "SmaliLexer.ll"
{ sb.push_back('\n'); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 239 "SmaliLexer.ll"
{ sb.push_back('\f'); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 240 "SmaliLexer.ll"
{ sb.push_back('\r'); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 241 "SmaliLexer.ll"
{ sb.push_back('\''); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 242 "SmaliLexer.ll"
{ sb.push_back('"'); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 243 "SmaliLexer.ll"
{ sb.push_back('\\'); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 244 "SmaliLexer.ll"
{
        auto i = strtol(yytext+2, 0, 16);
        sb.append((char*)&i, 2);
    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 249 "SmaliLexer.ll"
{
        sb.append(yytext, yyleng);
    }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 253 "SmaliLexer.ll"
{
        sb.append(yytext, yyleng);
    }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 257 "SmaliLexer.ll"
{ BEGIN(INITIAL);
            acceptToken(sb.c_str(), sb.length());
            return SmaliParser::make_ERROR(sb, LOCATION); }
	YY_BREAK
case YY_STATE_EOF(CHAR):
#line 260 "SmaliLexer.ll"
{ BEGIN(INITIAL);
            acceptToken(sb.c_str(), sb.length());
            return SmaliParser::make_ERROR(sb, LOCATION); }
	YY_BREAK
/*Misc*/
case 88:
YY_RULE_SETUP
#line 266 "SmaliLexer.ll"
{
        int number = strtoull(yytext + 1, 0, 10);
        if (yytext[0] == 'p' || yytext[0] == 'P') {
            number |= 0x100;
        }
        MATCHT; return makeTokenI(REGISTER, number);
    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 274 "SmaliLexer.ll"
{
        MATCHT; return makeTokenStr(ANNOTATION_VISIBILITY);
    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 278 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_PUBLIC);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 280 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_PRIVATE);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_PROTECTED);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 284 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_STATIC);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 286 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_FINAL);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 288 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_SYNCHRONIZED);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 290 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_SUPER);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 292 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_VOLATILE);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 294 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_BRIDGE);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 296 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_TRANSIENT);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 298 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_VARARGS);}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 300 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_NATIVE);}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 302 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_INTERFACE);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 304 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_ABSTRACT);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 306 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_STRICT);}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 308 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_SYNTHETIC);}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 310 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_ANNOTATION);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 312 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_ENUM);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 314 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_CONSTRUCTOR);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 316 "SmaliLexer.ll"
{
        MATCHT; return makeTokenI(FLAG, ACC_FLAGS::ACC_DECLARED_SYNCHRONIZED);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 319 "SmaliLexer.ll"
{
    MATCHT; return makeTokenStr(VERIFICATION_ERROR_TYPE);
    }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 323 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(INLINE_INDEX); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 324 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(VTABLE_INDEX); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 325 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(FIELD_OFFSET); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 327 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(LINE_COMMENT); }
	YY_BREAK
/*      instruction keyword     */
case 115:
YY_RULE_SETUP
#line 330 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NOP);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 331 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 332 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_FROM16);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 333 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_16);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 334 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_WIDE);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 335 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_WIDE_FROM16);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 336 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_WIDE_16);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 337 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_OBJECT);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 338 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_OBJECT_FROM16);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 339 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_OBJECT_16);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 340 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_RESULT);}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 341 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_RESULT_WIDE);}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 342 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_RESULT_OBJECT);}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 343 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MOVE_EXCEPTION);}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 344 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_RETURN_VOID);}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 345 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_RETURN);}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 346 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_RETURN_WIDE);}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 347 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_RETURN_OBJECT);}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 348 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_4);}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 349 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_16);}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 350 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST);}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 351 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_HIGH16);}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 352 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_WIDE_16);}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 353 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_WIDE_32);}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 354 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_WIDE);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 355 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_WIDE_HIGH16);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 356 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_STRING);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 357 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_STRING_JUMBO);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 358 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CONST_CLASS);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 359 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MONITOR_ENTER);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 360 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MONITOR_EXIT);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 361 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CHECK_CAST);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 362 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INSTANCE_OF);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 363 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ARRAY_LENGTH);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 364 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NEW_INSTANCE);}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 365 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NEW_ARRAY);}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 366 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_FILLED_NEW_ARRAY);}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 367 "SmaliLexer.ll"
{
                    MATCHT; return makeToken(OP_FILLED_NEW_ARRAY_RANGE);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 369 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_FILL_ARRAY_DATA);}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 370 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_THROW);}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 371 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_GOTO);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 372 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_GOTO_16);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 373 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_GOTO_32);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 374 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_PACKED_SWITCH);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 375 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPARSE_SWITCH);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 376 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CMPL_FLOAT);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 377 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CMPG_FLOAT);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 378 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CMPL_DOUBLE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 379 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CMPG_DOUBLE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 380 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_CMP_LONG);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 381 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_EQ);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 382 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_NE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 383 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_LT);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 384 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_GE);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 385 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_GT);}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 386 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_LE);}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 387 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_EQZ);}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 388 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_NEZ);}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 389 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_LTZ);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 390 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_GEZ);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 391 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_GTZ);}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 392 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IF_LEZ);}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 393 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_3E);}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 394 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_3F);}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 395 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_40);}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 396 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_41);}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 397 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_42);}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 398 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_43);}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 399 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET);}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 400 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET_WIDE);}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 401 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET_OBJECT);}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 402 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET_BOOLEAN);}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 403 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET_BYTE);}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 404 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET_CHAR);}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 405 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AGET_SHORT);}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 406 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT);}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 407 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT_WIDE);}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 408 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT_OBJECT);}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 409 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT_BOOLEAN);}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 410 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT_BYTE);}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 411 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT_CHAR);}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 412 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_APUT_SHORT);}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 413 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET);}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 414 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_WIDE);}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 415 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_OBJECT);}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 416 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_BOOLEAN);}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 417 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_BYTE);}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 418 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_CHAR);}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 419 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_SHORT);}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 420 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT);}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 421 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_WIDE);}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 422 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_OBJECT);}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 423 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_BOOLEAN);}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 424 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_BYTE);}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 425 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_CHAR);}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 426 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_SHORT);}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 427 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET);}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 428 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_WIDE);}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 429 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_OBJECT);}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 430 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_BOOLEAN);}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 431 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_BYTE);}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 432 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_CHAR);}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 433 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_SHORT);}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 434 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT);}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 435 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_WIDE);}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 436 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_OBJECT);}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 437 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_BOOLEAN);}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 438 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_BYTE);}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 439 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_CHAR);}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 440 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_SHORT);}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 441 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INVOKE_VIRTUAL);}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 442 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INVOKE_SUPER);}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 443 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INVOKE_DIRECT);}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 444 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INVOKE_STATIC);}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 445 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INVOKE_INTERFACE);}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 446 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_73);}
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 447 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_VIRTUAL_RANGE);}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 449 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INVOKE_SUPER_RANGE);}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 450 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_DIRECT_RANGE);}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 452 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_STATIC_RANGE);}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 454 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_INTERFACE_RANGE);}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 456 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_79);}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 457 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_7A);}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 458 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NEG_INT);}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 459 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NOT_INT);}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 460 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NEG_LONG);}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 461 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NOT_LONG);}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 462 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NEG_FLOAT);}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 463 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_NEG_DOUBLE);}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 464 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INT_TO_LONG);}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 465 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INT_TO_FLOAT);}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 466 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INT_TO_DOUBLE);}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 467 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_LONG_TO_INT);}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 468 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_LONG_TO_FLOAT);}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 469 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_LONG_TO_DOUBLE);}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 470 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_FLOAT_TO_INT);}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 471 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_FLOAT_TO_LONG);}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 472 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_FLOAT_TO_DOUBLE);}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 473 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DOUBLE_TO_INT);}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 474 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DOUBLE_TO_LONG);}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 475 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DOUBLE_TO_FLOAT);}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 476 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INT_TO_BYTE);}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 477 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INT_TO_CHAR);}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 478 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_INT_TO_SHORT);}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 479 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_INT);}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 480 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_INT);}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 481 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_INT);}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 482 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_INT);}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 483 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_INT);}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 484 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AND_INT);}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 485 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_OR_INT);}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 486 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_XOR_INT);}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 487 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHL_INT);}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 488 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHR_INT);}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 489 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_USHR_INT);}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 490 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_LONG);}
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 491 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_LONG);}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 492 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_LONG);}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 493 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_LONG);}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 494 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_LONG);}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 495 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AND_LONG);}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 496 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_OR_LONG);}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 497 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_XOR_LONG);}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 498 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHL_LONG);}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 499 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHR_LONG);}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 500 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_USHR_LONG);}
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 501 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_FLOAT);}
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 502 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_FLOAT);}
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 503 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_FLOAT);}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 504 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_FLOAT);}
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 505 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_FLOAT);}
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 506 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_DOUBLE);}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 507 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_DOUBLE);}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 508 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_DOUBLE);}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 509 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_DOUBLE);}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 510 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_DOUBLE);}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 511 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_INT_2ADDR);}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 512 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_INT_2ADDR);}
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 513 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_INT_2ADDR);}
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 514 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_INT_2ADDR);}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 515 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_INT_2ADDR);}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 516 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AND_INT_2ADDR);}
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 517 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_OR_INT_2ADDR);}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 518 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_XOR_INT_2ADDR);}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 519 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHL_INT_2ADDR);}
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 520 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHR_INT_2ADDR);}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 521 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_USHR_INT_2ADDR);}
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 522 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_LONG_2ADDR);}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 523 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_LONG_2ADDR);}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 524 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_LONG_2ADDR);}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 525 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_LONG_2ADDR);}
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 526 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_LONG_2ADDR);}
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 527 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AND_LONG_2ADDR);}
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 528 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_OR_LONG_2ADDR);}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 529 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_XOR_LONG_2ADDR);}
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 530 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHL_LONG_2ADDR);}
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 531 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHR_LONG_2ADDR);}
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 532 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_USHR_LONG_2ADDR);}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 533 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_FLOAT_2ADDR);}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 534 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_FLOAT_2ADDR);}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 535 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_FLOAT_2ADDR);}
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 536 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_FLOAT_2ADDR);}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 537 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_FLOAT_2ADDR);}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 538 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_DOUBLE_2ADDR);}
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 539 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SUB_DOUBLE_2ADDR);}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 540 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_DOUBLE_2ADDR);}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 541 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_DOUBLE_2ADDR);}
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 542 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_DOUBLE_2ADDR);}
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 543 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_INT_LIT16);}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 544 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_RSUB_INT);}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 545 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_INT_LIT16);}
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 546 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_INT_LIT16);}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 547 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_INT_LIT16);}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 548 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AND_INT_LIT16);}
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 549 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_OR_INT_LIT16);}
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 550 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_XOR_INT_LIT16);}
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 551 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_ADD_INT_LIT8);}
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 552 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_RSUB_INT_LIT8);}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 553 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_MUL_INT_LIT8);}
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 554 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_DIV_INT_LIT8);}
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 555 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_REM_INT_LIT8);}
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 556 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_AND_INT_LIT8);}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 557 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_OR_INT_LIT8);}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 558 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_XOR_INT_LIT8);}
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 559 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHL_INT_LIT8);}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 560 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SHR_INT_LIT8);}
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 561 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_USHR_INT_LIT8);}
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 562 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_VOLATILE);}
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 563 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_VOLATILE);}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 564 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SGET_VOLATILE);}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 565 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_SPUT_VOLATILE);}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 566 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_IGET_OBJECT_VOLATILE);}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 568 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_IGET_WIDE_VOLATILE);}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 570 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_IPUT_WIDE_VOLATILE);}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 572 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_SGET_WIDE_VOLATILE);}
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 574 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_SPUT_WIDE_VOLATILE);}
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 576 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_BREAKPOINT);}
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 577 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_THROW_VERIFICATION_ERROR);}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 579 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_EXECUTE_INLINE);}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 580 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_EXECUTE_INLINE_RANGE);}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 582 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_OBJECT_INIT_RANGE);}
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 584 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_RETURN_VOID_BARRIER);}
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 586 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_QUICK);}
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 587 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_WIDE_QUICK);}
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 588 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IGET_OBJECT_QUICK);}
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 589 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_QUICK);}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 590 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_WIDE_QUICK);}
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 591 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_IPUT_OBJECT_QUICK);}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 592 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_VIRTUAL_QUICK);}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 594 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_VIRTUAL_QUICK_RANGE);}
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 596 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_SUPER_QUICK);}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 598 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_INVOKE_SUPER_QUICK_RANGE);}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 600 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_IPUT_OBJECT_VOLATILE);}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 602 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_SGET_OBJECT_VOLATILE);}
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 604 "SmaliLexer.ll"
{
                        MATCHT; return makeToken(OP_SPUT_OBJECT_VOLATILE);}
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 606 "SmaliLexer.ll"
{MATCHT; return makeToken(OP_UNUSED_FF);}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 609 "SmaliLexer.ll"
{ BEGIN(INITIAL); MATCHT; return makeTokenStr(PRIMITIVE_TYPE); }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 610 "SmaliLexer.ll"
{ BEGIN(INITIAL); MATCHT; return makeTokenStr(CLASS_DESCRIPTOR); }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 611 "SmaliLexer.ll"
{ yyless(0); BEGIN(INITIAL); }
	YY_BREAK
case YY_STATE_EOF(ARRAY_DESCRIPTOR):
#line 612 "SmaliLexer.ll"
{ BEGIN(INITIAL); }
	YY_BREAK
/*Types*/
case 374:
YY_RULE_SETUP
#line 616 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(PRIMITIVE_TYPE); }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 617 "SmaliLexer.ll"
{ MATCHT; return makeToken(VOID_TYPE); }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 618 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(CLASS_DESCRIPTOR); }
	YY_BREAK
/* we have to drop into a separate state so that we don't parse something like */
/* "[I->" as "[" followed by "I-" as a SIMPLE_NAME */
case 377:
YY_RULE_SETUP
#line 622 "SmaliLexer.ll"
{
      BEGIN(ARRAY_DESCRIPTOR);
      MATCHT; return makeTokenStr(ARRAY_TYPE_PREFIX);
    }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 627 "SmaliLexer.ll"
{
        // go back and re-lex it as a PARAM_LIST_OR_ID
        yyless(0);
        BEGIN(PARAM_LIST_OR_ID);
    }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 633 "SmaliLexer.ll"
{
        // go back and re-lex it as a PARAM_LIST
        yyless(0);
        BEGIN(PARAM_LIST);
    }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 639 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(SIMPLE_NAME); }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 640 "SmaliLexer.ll"
{ MATCHT; return makeTokenStr(MEMBER_NAME); }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 643 "SmaliLexer.ll"
{ MATCHT; }
	YY_BREAK
case 383:
/* rule 383 can match eol */
YY_RULE_SETUP
#line 644 "SmaliLexer.ll"
{ MATCHT; return makeToken(EOL); }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 645 "SmaliLexer.ll"
{ MATCHT; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 646 "SmaliLexer.ll"
{ return yyterminate(); }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 648 "SmaliLexer.ll"
ECHO;
	YY_BREAK
#line 4398 "SmaliLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Analysis_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Analysis_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Analysis_realloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Analysis_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2246 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2246 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 2245);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Analysis_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Analysis_alloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Analysis_free((void *) b->yy_ch_buf  );

	Analysis_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)Analysis_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Analysis_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Analysis_alloc(new_size  );

		else
			(yy_start_stack) = (int *) Analysis_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Analysis_alloc (yy_size_t  size )
{
			return malloc(size);
}

void *Analysis_realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void Analysis_free (void * ptr )
{
			free( (char *) ptr );	/* see Analysis_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 648 "SmaliLexer.ll"


void Analysis::SmaliLexer::yyBegin(int type) {
    BEGIN(type);
}


